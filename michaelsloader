local Name = game:GetService("Players").LocalPlayer.Name
local Player = game:GetService("Players").LocalPlayer

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

local Window = Library.CreateLib("Michael's Zombies by vez#1944 - discord.gg/SzTRYkBu8u", colors)
local Tab1 = Window:NewTab("main")
local Tab2 = Window:NewTab("zombies & weapons")
local Tab4 = Window:NewTab("teleports")
local Tab3 = Window:NewTab("other")

local Section1 = Tab1:NewSection("main stuff")
local Section2 = Tab2:NewSection("zombie stuff")
local Section3 = Tab3:NewSection("other stuff")
local Section4 = Tab4:NewSection("teleport stuff")

local Old;
  Old = hookmetamethod(game, "__index", function(self, key)
    if key == "WalkSpeed" and self == game.Players.LocalPlayer.Character.Humanoid then
      return 16
    end
    return Old(self, key)
end)

local Old;
  Old = hookmetamethod(game, "__index", function(self, key)
    if key == "JumpPower" and self == game.Players.LocalPlayer.Character.Humanoid then
      return 50
    end
    return Old(self, key)
end)

local CharStuff = {
    ["WalkSpeed"] = 16,
    ["JumpPower"] = 50,
    ["HipHeight"] = 0
}

Section1:NewToggle("Toggle Speed", "", function(ws)
getgenv().ws = ws
    if getgenv().ws then
        _G.speedy = game:GetService("RunService").RenderStepped:Connect(function()
            Player.Character.Humanoid.WalkSpeed = CharStuff["WalkSpeed"]
        end)
    else
        spawn(function()
            Player.Character.Humanoid.WalkSpeed = 16
        end)
        _G.speedy:Disconnect()
    end
end)

Section1:NewSlider("Speed","speedy", 100, 16, function(ws)
    CharStuff["WalkSpeed"] = ws
end)

Section1:NewToggle("Toggle Jump", "", function(jp)
getgenv().jp = jp
    if getgenv().jp then
        _G.jumpy = game:GetService("RunService").RenderStepped:Connect(function()
            Player.Character.Humanoid.JumpPower = CharStuff["JumpPower"]
        end)
    else
        spawn(function()
            Player.Character.Humanoid.JumpPower = 50
        end)
        _G.jumpy:Disconnect()
    end
end)

Section1:NewSlider("Jump","Jumpy pumpy", 200, 50, function(ws)
    CharStuff["WalkSpeed"] = ws
end)

Section1:NewToggle("Toggle Hip Height", "", function(hh)
getgenv().hh = hh
    if getgenv().hh then
        _G.Height = game:GetService("RunService").RenderStepped:Connect(function()
            Player.Character.Humanoid.HipHeight = CharStuff["HipHeight"]
        end)
    else
        spawn(function()
            Player.Character.Humanoid.HipHeight = 0
        end)
        _G.Height:Disconnect()
    end
end)

Section1:NewSlider("Hip Height","hippy", 235, 0, function(hh)
    CharStuff["HipHeight"] = hh
end)

Section1:NewLabel("More stuff")

Section1:NewButton("Roll Mystery Box (auto takes)", "", function()
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace._MapComponents.MysteryBox.PurchaseBox.CFrame - workspace._MapComponents.MysteryBox.PurchaseBox.CFrame.LookVector * 6
    game.Players.LocalPlayer.Character.Humanoid:MoveTo(workspace._MapComponents.MysteryBox.PurchaseBox.Position)
    local args = {[1] = workspace._MapComponents.MysteryBox.PurchaseBox}
    game:GetService("Players").LocalPlayer.Character.Remotes.UpdateHoverObject:FireServer(unpack(args))
    local args = {[1] = true}
    game:GetService("Players").LocalPlayer.Character.Remotes.UpdateInputHold:FireServer(unpack(args))
end)

Section1:NewToggle("No-Reload", "reloads for you", function(a)
    while a == true do wait(0.1)
        game.Players.LocalPlayer.Character.Remotes.Reload:FireServer()
    end
end)

Section1:NewToggle("Third-Person", "puts u in third person", function(t)
    if t then
        game.Players.LocalPlayer.CameraMode = "Classic"
    else
        game.Players.LocalPlayer.CameraMode = "LockFirstPerson"
    end
end)

Section1:NewToggle("Downed Features", "use grenades,run while downed", function(t)
_G.penis = t
    while _G.penis == true do wait()
        if game.Players.LocalPlayer.Character.CharStats.Downed.Value == true then
            game.Players.LocalPlayer.Character.CharStats.Downed.Value = false
        end
    end
end)

Section1:NewButton("No-Clip (The Lighthouse)", "", function(t)
    for i,v in pairs(workspace.Geometry.Building:GetChildren()) do
        if v:IsA("Part") or v:IsA("WedgePart") or v:IsA("MeshPart") or v:IsA("UnionOperation") then
            v.CanCollide = false
        end
    end
end)

Section2:NewToggle("Expand Hitboxes", "", function(sas)
    getgenv().sas = sas
        if getgenv().sas then
            someloop = game:GetService("RunService").RenderStepped:Connect(function()
                for i,v in pairs(workspace.Ignore.Zombies:GetChildren()) do
                    if v:IsA("Model") then
                        v.HumanoidRootPart.Size = Vector3.new(50,5,50)
                        v.HumanoidRootPart.CanCollide = false
                        v.HumanoidRootPart.Transparency = 0.925
                        v.HumanoidRootPart.Color = Color3.new(255, 0, 0)
                    end
                end
            end)
        else
            for i,v in pairs(workspace.Ignore.Zombies:GetChildren()) do
                if v:IsA("Model") then
                v.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                v.HumanoidRootPart.CanCollide = true
                v.HumanoidRootPart.Transparency = 1
            end
        end
    someloop:Disconnect()
    end
end)

local ESP3 = loadstring(game:HttpGet("https://pastebin.com/raw/1KPn58Z3"))()

workspace.Ignore.Zombies.ChildAdded:Connect(function(child)
    if _G.zbe == true then
        wait(1)
        ESP3:DrawBox(child)
    end
end)
    

Section2:NewToggle("Zombie Box ESP", "", function(t)
    _G.zbe = t
    if _G.zbe == true then
        for i,v in pairs(workspace.Ignore.Zombies:GetChildren()) do
            if v:IsA("Model") then
                ESP3:DrawBox(v)
            end
        end
    else
        ESP3:CleanUp()
    end
end)

Section2:NewLabel("Weapons")

FireRate = 500

Section2:NewToggle("Gun Fire-Rate", "", function(t)
    for i,v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v, "RPM") then
            print(i, v.RPM)
            v.RPM = FireRate
        end
    end
end)

Section2:NewSlider("Fire-Rate Changer", "", 4500,100, function(t)
    FireRate = t
end)

Section2:NewButton("Remove Recoil", "", function(t)
    for i,v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v, "RPM") then
            v.CAMERA_RECOIL = {
                IDLE = function()
                    return Vector3.new(0,0,0) 
                end;
                CROUCH = function()
                    return Vector3.new(0,0,0) 
                end;
                AIM = function()
                    return Vector3.new(0,0,0) 
                end;
            }
        end
    end
end)

Section2:NewButton("Turn Semi-Auto to Auto", "", function(t)
    for i,v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v, "RPM") then
            v.FIRE_TYPE = "AUTO"
        end
    end
end)

Section2:NewToggle("Silent Kill Aura (Gun)", "", function(t)
    _G.kt = t
    spawn(function()
        pcall(function()
            while _G.kt == true do task.wait(0.25)
                game.Players.LocalPlayer.Character.Remotes.Reload:FireServer()
                for i,v in pairs(workspace.Ignore.Zombies:GetChildren()) do
                    if v:IsA("Model") and v.Humanoid.Health ~= 0 then
                        game.ReplicatedStorage.Framework.Remotes.FireBullet:FireServer(v.Head.Position, workspace:GetServerTimeNow());
                    end
                end
            end
        end)
    end)
end)

Section2:NewToggle("Silent Knife Aura", "", function(t)
    _G.ktt = t
    spawn(function()
        pcall(function()
            while _G.ktt == true do task.wait(0.215)
                for i,v in pairs(workspace.Ignore.Zombies:GetChildren()) do
                    if not v:FindFirstChild("Humanoid") then continue end
                    local args = {
                        [1] = v.Humanoid
                    }
                    game:GetService("ReplicatedStorage").Framework.Remotes.KnifeHitbox:FireServer(unpack(args))
                end
            end
        end)
    end)
end)

local Settings = {
	Fov = 200;
}

local old_namecall;
old_namecall = hookmetamethod(game, "__namecall", newcclosure(function(...)
	local method = getnamecallmethod() --> we can get the calling method using this (eg. ray.new)
	local args = {...} --> arguments so we can spoof them
    self = args[1]
    
    if method == "FireServer" and self.Name == "FireBullet" and _G.Silent == true then
        args[2] = ClosestTarget.Head.Position
    end
        
	return old_namecall(unpack(args)) --> basically continue the namecall but with our custom arguments
end)) --// Let's hook __namecall to see when raycast is called so we can spoof it omg

Section2:NewToggle("Silent Aim", "", function(t)
    _G.Silent = t
    
    local Player = game.Players.LocalPlayer
    local Mouse = Player:GetMouse()
    local UserInputService = game:GetService("UserInputService")
    
    function ValidateArguments(Args, RayMethod)
        local Matches = 0
        if #Args < RayMethod.ArgCountRequired then
            return false
        end
        for Pos, Argument in next, Args do
            if typeof(Argument) == RayMethod.Args[Pos] then
                Matches = Matches + 1
            end
        end
        return Matches >= RayMethod.ArgCountRequired
    end
    
    function DrawFov()
    	task.spawn(function()
    		local Circle = Drawing.new("Circle");
    		Circle.Thickness = 0.2; 
    		Circle.NumSides = 48;
    		Circle.Radius = Settings.Fov;
    		Circle.Color = Color3.fromRGB(0,255,0)
    		Circle.Visible = true
    		
    		local Re;
    		Re = game:GetService("RunService").RenderStepped:Connect(function()
    		    if _G.Silent == false then
    		        Circle:Remove()
    		        Re:Disconnect()
    		    end
        		Circle.Radius = Settings.Fov
        	    Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 34);
    		end)
    	end)
    end
    
    function GetClosestCharacter()
        local Last = math.huge;
        local LastCharacter = nil;
        local Fov = Settings.Fov;
        for i,v in pairs(workspace.Ignore.Zombies:GetChildren()) do
            local Character = v
            if not Character or (Character and not Character.PrimaryPart) then task.wait() continue end
    
            local MousePos = UserInputService:GetMouseLocation();
            local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(Character.PrimaryPart.Position)
            local PlayerPos = Vector2.new(ScreenPos.X, ScreenPos.Y)
    
            local Dist = (MousePos - PlayerPos).Magnitude
            
            if Dist <= Fov and Dist < Last then
                LastCharacter = Character;
                Last = Dist;
            end
        end
        return LastCharacter
    end --// Function to get closest player to mouse; very useful
    
    local ClosestTarget = nil;
    
    DrawFov();
    
    while _G.Silent == true do
    	task.wait()
    	ClosestTarget = GetClosestCharacter();
    end
end)


Section2:NewSlider("Silent Aim FOV", "", 600,10, function(t)
    Settings.Fov = t
end)

Section2:NewToggle("Flame-Thrower Aura", "", function(t)
    _G.FTA = t
    spawn(function()
        while _G.FTA == true do wait()
            for i,v in pairs(workspace.Ignore.Zombies:GetChildren()) do
                if not v:FindFirstChild("Humanoid") then continue end
                local args = {
                    [1] = v.Humanoid,
                    [2] = Vector3.new(2048,2048,2048)
                }   
                game:GetService("ReplicatedStorage").Framework.Remotes.FlameHitbox:FireServer(unpack(args))
            end
        end
    end)
end)

Section3:NewToggle("Delete Barriers", "", function(bbb)
    if bbb then
        for i,v in pairs(workspace.Ignore.MapCollisions.PlayerBlockers:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = false
            end
        end
        for i,v in pairs(workspace.Ignore.MapCollisions.GeneralBlockers.OutsideWallCollider:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = false
            end
        end
        for i,v in pairs(workspace.Ignore.MapCollisions.ZombieRaycastBlockers:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = false
            end
        end
        for i,v in pairs(workspace["_Barriers"]:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = false
            end
        end
    else
        for i,v in pairs(workspace.Ignore.MapCollisions.PlayerBlockers:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = true
            end
        end
        for i,v in pairs(workspace.Ignore.MapCollisions.GeneralBlockers.OutsideWallCollider:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = true
            end
        end
        for i,v in pairs(workspace.Ignore.MapCollisions.ZombieRaycastBlockers:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = true
            end
        end
        for i,v in pairs(workspace["_Barriers"]:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = true
            end
        end
    end
end)

Section3:NewButton("Delete Map Decoration","",function()
    workspace.Ignore.MapIgnores:Destroy()
    workspace.Ignore.MapCollisions:Destroy()
end)

Section3:NewToggle("Increase shot accuracy", "spoofs the game into thinking ur always aiming", function(t)
gfh = t
    while gfh == true do wait()
        local args = {[1] = true}
        game:GetService("Players").LocalPlayer.Character.Remotes.Aiming:FireServer(unpack(args))
    end
end)

Section3:NewButton("Get rid of annoying obstacle collisions", "yes", function(t)
    if t then
        for i,v in pairs(workspace.Geometry.MapDetails:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = false
            end
        end
    else
        for i,v in pairs(workspace.Geometry.MapDetails:GetDescendants()) do
            if v:IsA("Part") then
                v.CanCollide = false
            end
        end
    end
end)

Section3:NewLabel("ESPs")

local ESP2 = loadstring(game:HttpGet("https://pastebin.com/raw/1KPn58Z3"))()

Section3:NewToggle("Mystery Box ESP", "", function(t)
    if t == true then
        for i,v in pairs(workspace["_MapComponents"]:GetChildren()) do
            if v.Name == "MysteryBox" then
                ESP2:DrawBox(v)
            end
        end
    else
        ESP2:CleanUp()
    end
end)


local ESP = loadstring(game:HttpGet("https://pastebin.com/raw/1KPn58Z3"))()

Section3:NewToggle("Player Skeleton ESP", "credits to Enxquity#9999 for sexy drawing lib", function(t)
    if t == true then
        ESP:DrawSkeletonPlayers()
    else
        ESP:CleanUp()
    end
end)

Section3:NewToggle("Player Box ESP", "credits to Enxquity#9999 for sexy drawing lib", function(t)
    if t == true then
        ESP:DrawBoxPlayers()
    else
        ESP:CleanUp()
    end
end)

Section3:NewButton("Clean ESP", "", function(t)
    ESP:CleanUp()
    ESP2:CleanUp()
    ESP3:CleanUp()
end)

Section3:NewLabel("Other")

Section3:NewToggle("Auto-Grab Powerups","",function(t)
_G.agp = t
    pcall(function()
        while _G.agp == true do wait()
            for i,v in pairs(workspace.Ignore._Powerups:GetChildren()) do
                if v:IsA("MeshPart") then
                    v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                end
            end
        end
    end)
end)


Section4:NewButton("Map Spawn", "", function()
    Player.Character.HumanoidRootPart.CFrame = workspace["_MapComponents"]["MAP_SPAWN"].CFrame
end)

Section4:NewButton("Mystery Box", "", function()
    Player.Character.HumanoidRootPart.CFrame = workspace["_MapComponents"].MysteryBox.Wood.CFrame
end)

Section4:NewButton("Juggernog Perk", "", function()
    Player.Character.HumanoidRootPart.CFrame = workspace["_PerkMachines"]["Juggernog Machine"].LogoPart.CFrame
end)

Section4:NewButton("Speed Cola Perk", "", function()
    Player.Character.HumanoidRootPart.CFrame = workspace["_PerkMachines"]["Speed Cola Machine"].LogoPart.CFrame
end)

Section4:NewButton("Double Tap Perk", "", function()
    Player.Character.HumanoidRootPart.CFrame = workspace["_PerkMachines"]["Double Tap Machine"].LogoPart.CFrame
end)

Section4:NewButton("Quick Revive Perk", "", function()
    Player.Character.HumanoidRootPart.CFrame = workspace["_PerkMachines"]["Quick Revive Machine"].LogoPart.CFrame
end)

Section4:NewLabel("Map: The Lighthouse")

Section4:NewButton("Escape Boat", "", function()
    Player.Character.HumanoidRootPart.CFrame = workspace["_MapComponents"].EscapeBoat.SmallBox.CFrame
end)

Section4:NewLabel("Map: The Giant")

Section4:NewButton("Power Switch", "", function()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(96.5489197, 36.1999969, 289.920624, -0.511897981, 0, 0.859046221, 0, 1, 0, -0.859046221, 0, -0.511897981)
end)

Section4:NewButton("Teleporter A", "", function()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(-139.697998, 45.7837677, 234.985596, 0, 0, -1, 0, 1, 0, 1, 0, 0)
end)

Section4:NewButton("Teleporter B", "", function()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(38.3459244, 48.5076294, 472.636169, 1, 0, 0, 0, 1, 0, 0, 0, 1)
end)

Section4:NewButton("Teleporter C", "", function()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(198.635696, 46.0807343, 311.11319, 0, 0, 1, 0, 1, -0, -1, 0, 0)
end)

Section4:NewButton("Pack a Punch", "", function()
    Player.Character.HumanoidRootPart.CFrame = workspace["_MapComponents"].PackAPunch.Model["Meshes/pap_Plane"].CFrame
end)

a = Instance.new('Part', workspace)
a.Anchored = true
a.Position = Vector3.new(-389.30755615234375, 14.582942962646484, -366.35650634765625)
a.Size = Vector3.new(2048,1,2048)
a.Transparency = 1

writefile("Michael's Zombies.txt","")
local namestable = {}

for i,v in pairs(game:GetService("Players").LocalPlayer.BaseData:GetChildren()) do 
    table.insert(namestable,v.Name)
    appendfile("Michael's Zombies.txt",tostring(v.Value)..":")
end   -- update on execution

for i,v in pairs(game:GetService("Players").LocalPlayer.BaseData:GetChildren()) do 
   v:GetPropertyChangedSignal("Value"):Connect(function()
       writefile("Michael's Zombies.txt","")
       for i,v in pairs(game:GetService("Players").LocalPlayer.BaseData:GetChildren()) do 
           appendfile("Michael's Zombies.txt",v.Value..":")
        end   
    end) 
end -- update when GetPropertyChangedSignal

local statstable = string.split(readfile("Michael's Zombies.txt"),":")

for i,v in pairs(statstable) do
   i = namestable[i]
   print(i,v)
end -- print your results

--[[
_G.t = true
while _G.t == true do task.wait()
    for i,v in pairs(workspace.Ignore.Zombies:GetChildren()) do
    if v:IsA("Model") then
        game.ReplicatedStorage.Framework.Remotes.FireBullet:FireServer(v.Head.Position, workspace:GetServerTimeNow());
    end
end
wait(1)
rconsoleprint(game:GetService("Workspace").Vezise.CharStats.GunInventory.Gun2.Clip.Value.."Clip ammount")
rconsoleprint(game:GetService("Workspace").Vezise.CharStats.GunInventory.Gun2.Storage.Value.."Storage ammount")
end
]]
