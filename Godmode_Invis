repeat task.wait() until game:IsLoaded()

local charac = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
--// Hook hipheight
if enabled and not workspace:FindFirstChild("Gayness2") then
    repeat task.wait() until charac
    repeat task.wait() until charac.HumanoidRootPart.Anchored == false -- so doesnt break incase of auto execute
    
    Party = Instance.new("Part", workspace)
    Party.Name = "Gayness2"
    Party.Anchored = false

	local Hook;
	Hook = hookfunction(getrawmetatable(game).__namecall, newcclosure(function(self, ...)
		local args = {...}
		if getnamecallmethod() == "InvokeServer" then
			if args[1] == "idklolbrah2de" then
				return "  ___XP DE KEY"
			end
		elseif getnamecallmethod() == "FireServer" and args[1] == "Reset" and args[3] ~= "W_XENON" then
			return wait(9e9)
		end
			
		if (getnamecallmethod() == "InvokeServer" or getnamecallmethod() == "InvokeClient") and args[1] == "Reset" and args[3] ~= "W_XENON" then
			return wait(9e9) 
		end

		return Hook(self, ...)
	end))
	
    task.spawn(function()
        pcall(function()
        	AntiTS = game:GetService("RunService").RenderStepped:Connect(function()
        		if Character and Character:FindFirstChild("InTimeStop") then
        			Character:FindFirstChild("InTimeStop"):Destroy()
        		end
        	end)
        end)
    end)
    
    game.Players.LocalPlayer.CharacterAdded:Connect(function()
		if Player.PlayerScripts:FindFirstChild("ResetTimer") then
			Player.PlayerScripts.ResetTimer:Destroy()
		end
		
		local NewEvent = Instance.new("BindableEvent")
		NewEvent.Event:Connect(function()
			local args = {
				[1] = "Reset",
				[2] = {
					["Anchored"] = false
				},
				[3] = "XENON_ON_TOP"
			}
		
			game:GetService("Players").LocalPlayer.Character.RemoteEvent:FireServer("Reset", {["Anchored"] = false}, "W_XENON")
		end)

		game:GetService("StarterGui"):SetCore("ResetButtonCallback", NewEvent)
	end)
end

--// Local Variables
local plr = game.Players.LocalPlayer
local Character = plr.Character or CharacterAdded:Wait()
local hrp = Character.HumanoidRootPart
local hum = Character.Humanoid

if enabled then

    repeat task.wait() until Character
    repeat task.wait() until hrp.Anchored == false -- so doesnt break incase of auto execute
    
    --// Measures
    pcall(function()
        character.Part:Destroy()
        character.FocusCam:Destroy()
    end)
    
    task.wait(0.1)

	Character.Archivable = true
	local Part1 = Character:Clone()
	Character.Archivable = false
	Part1.Parent = Character
	Part1.Name = "Part"
	Part1.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame
	
	pcall(function()
	    Character.Part.StandMorph:Destroy()
	end)
    
    local FocusCam = Instance.new("ObjectValue", Part1)
    FocusCam.Name = "FocusCam"
    FocusCam.Value = Part1
    FocusCam.Parent = Character

    task.wait(0.1)
    
    local FakeCharacter = Character:FindFirstChild("Part")
    ActuallyEnabled = true
                
    local UserInputService = game:GetService("UserInputService")
    local PartThing = nil
    local MoveForward = false
    local MoveBackward = false
    local MoveLeft = false
    local MoveRight = false
    local Jump = false
                
    repeat task.wait() until FakeCharacter
    
    WalkAnim = Instance.new("Animation", AnimFolder)
    WalkAnim.Name = "Walk"
    WalkAnim.AnimationId = "rbxassetid://4109943333"
    WalkAnimation = FakeCharacter.Humanoid:LoadAnimation(WalkAnim)
                
    UserInputService.InputBegan:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.W then
            MoveForward = true
            WalkAnimation:Play()
        end
    end)
                
    UserInputService.InputEnded:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.W then
            MoveForward = false
            WalkAnimation:Stop()
        end
    end)
                
    UserInputService.InputBegan:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.S then
            MoveBackward = true
            WalkAnimation:Play()
        end
    end)
                
    UserInputService.InputEnded:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.S then
            MoveBackward = false
            WalkAnimation:Stop()
        end
    end)
                
    UserInputService.InputBegan:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.A then
            MoveLeft = true
            WalkAnimation:Play()
        end
    end)
                
    UserInputService.InputEnded:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.A then
            MoveLeft = false
            
            if not Input.KeyCode == Enum.KeyCode.A and not Input.KeyCode == Enum.KeyCode.W then
                WalkAnimation:Stop()
            end
        end
    end)
                
    UserInputService.InputBegan:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.D then
            MoveRight = true
            WalkAnimation:Play()
        end
    end)
                
    UserInputService.InputEnded:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.D then
            MoveRight = false
            if not Input.KeyCode == Enum.KeyCode.D and not Input.KeyCode == Enum.KeyCode.W then
                WalkAnimation:Stop()
            end
        end
    end)
    
    UserInputService.InputBegan:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.Space then
            Jump = true
        end
    end)
    
    UserInputService.InputEnded:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.Space then
            Jump = false
        end
    end)
                
    task.wait(.2)
    
    while enabled do task.wait()
        
        if MoveForward then
            FakeCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame + FakeCharacter.HumanoidRootPart.CFrame.LookVector * getgenv().WalkSpeed / 100
        end
        
        if MoveBackward then
            FakeCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame - FakeCharacter.HumanoidRootPart.CFrame.LookVector * getgenv().WalkSpeed / 100
        end
        
        if MoveLeft then
            FakeCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame - FakeCharacter.HumanoidRootPart.CFrame.RightVector * getgenv().WalkSpeed / 100
        end
        
        if MoveRight then
            FakeCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame + FakeCharacter.HumanoidRootPart.CFrame.RightVector * getgenv().WalkSpeed / 100
        end
        
        if Jump then
            for i = 1, 50 do
                FakeCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame + Vector3.new(0, getgenv().JumpPower / 2000, 0)
            end
        end

        pcall(function()
            hrp.CFrame = FakeCharacter.HumanoidRootPart.CFrame + Vector3.new(0, -40, 0)
            Character["StandMorph"].HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame + FakeCharacter.HumanoidRootPart.CFrame.LookVector * 3.5
        end)
        
        local CameraLV = -workspace.CurrentCamera.CFrame.LookVector
        local Angle = -math.atan2(CameraLV.Z, CameraLV.X) + math.rad(90)
        FakeCharacter.HumanoidRootPart.CFrame = CFrame.new(FakeCharacter.HumanoidRootPart.Position) * CFrame.Angles(0, Angle, 0)
        
        if FakeCharacter == nil then
            enabled = false
        end
    end
else
    ActuallyEnabled = false
    
    task.wait(1)

    pcall(function()
        Character.Part:Destroy()
        Character.FocusCam:Destroy()
    end)
    
    hrp.CFrame = hrp.CFrame + Vector3.new(0, 55, 0)
    
    hrp.Anchored = false
end
