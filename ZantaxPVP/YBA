repeat task.wait() until game:IsLoaded()

pcall(function()
    game:GetService("Players").LocalPlayer.Idled:connect(function()
        game:GetService("VirtualUser"):ClickButton2(Vector2.new())
    end)
end)

wait(1)
pcall(function()
    for i,v in pairs(game.ReplicatedStorage.Effects:GetDescendants()) do
        if v:IsA("ParticleEmitter") then
            v:Destroy()
        end
    end
end)

repeat wait() until game.Players.LocalPlayer
    print("loading ui #1")
	local library = {}

	library.__index = library

	if not _G.Settings then
		_G.Settings = {
			["HideName"] = false,
			["HidePicture"] = false
		}
	end

	function library:Tween(asset, info, thing)
		game:GetService("TweenService"):Create(asset, info, thing):Play()
	end

	function library:DropInfo(asset, info, tbl)
		if not tbl.debounce then
			tbl.debounce = true

			local newText = asset:FindFirstChild("Text"):Clone()
			newText.Parent = asset
			newText.Name = "Info"
			newText.TextTransparency = 1
			newText.TextSize = 24
			newText.Position = UDim2.new(asset:FindFirstChild("Text").Position.X.Scale, asset:FindFirstChild("Text").Position.X.Offset, ((asset:FindFirstChild("Text").Position.Y.Scale / 2) * 3), asset:FindFirstChild("Text").Position.Y.Offset)
			newText.Text = info

			local textAsset = asset:FindFirstChild("Text")

			library:Tween(asset, TweenInfo.new(0.5), {Size = UDim2.new(asset.Size.X.Scale, asset.Size.X.Offset, (asset.Size.Y.Scale * 2), asset.Size.Y.Offset)})
			library:Tween(textAsset, TweenInfo.new(0.5), {Position = UDim2.new(textAsset.Position.X.Scale, textAsset.Position.X.Offset, (textAsset.Position.Y.Scale / 2), textAsset.Position.Y.Offset), Size = UDim2.new(textAsset.Size.X.Scale, textAsset.Size.X.Offset, (textAsset.Size.Y.Scale / 2), textAsset.Size.Y.Offset)})
			library:Tween(asset["Down"], TweenInfo.new(0.3), {Rotation = 180, Position = UDim2.new(asset["Down"].Position.X.Scale, asset["Down"].Position.X.Offset, (asset["Down"].Position.Y.Scale / 2), asset["Down"].Position.Y.Offset)})
			wait(0.5)

			library:Tween(newText, TweenInfo.new(0.5), {TextTransparency = 0})

			wait(0.5)

			tbl.debounce = false
			tbl.showingInfo = true
		end
	end

	function library:RetractInfo(asset, tbl)
		if not tbl.debounce then
			tbl.debounce = true
			library:Tween(asset["Info"], TweenInfo.new(0.25), {TextTransparency = 1})
			library:Tween(asset["Down"], TweenInfo.new(0.3), {Rotation = 0, Position = UDim2.new(asset["Down"].Position.X.Scale, asset["Down"].Position.X.Offset, (asset["Down"].Position.Y.Scale * 2), asset["Down"].Position.Y.Offset)})
			library:Tween(asset, TweenInfo.new(0.5), {Size = UDim2.new(asset.Size.X.Scale, asset.Size.X.Offset, (asset.Size.Y.Scale / 2), asset.Size.Y.Offset)})	

			local textAsset = asset:FindFirstChild("Text")
			library:Tween(textAsset, TweenInfo.new(0.5), {Position = UDim2.new(textAsset.Position.X.Scale, textAsset.Position.X.Offset, (textAsset.Position.Y.Scale * 2), textAsset.Position.Y.Offset), Size = UDim2.new(textAsset.Size.X.Scale, textAsset.Size.X.Offset, (textAsset.Size.Y.Scale * 2), textAsset.Size.Y.Offset)})

			wait(0.5)
			asset["Info"]:Destroy()
			tbl.debounce = false
			tbl.showingInfo = false
		end
	end

	function library:RoundNumber(num, numDecimalPlaces)
		return tonumber(string.format("%." .. (numDecimalPlaces or 0) .. "f", num))
	end

	function library:Ripple(ui, button, x, y, tbl)
		if x and y then
			spawn(function()
				local c = ui.Circle:Clone()
				c.Parent = button;

				c.ImageTransparency = 0.6

				local x, y = (x-button.AbsolutePosition.X), (y-button.AbsolutePosition.Y-36)
				c.Position = UDim2.new(0, x, 0, y)
				local len, size = 0.75, nil
				if button.AbsoluteSize.X >= button.AbsoluteSize.Y then
					size = (button.AbsoluteSize.X * 1.5)
				else
					size = (button.AbsoluteSize.Y * 1.5)
				end
				local tween = {}
				tween.Size = UDim2.new(0, size, 0, size)
				tween.Position = UDim2.new(0.5, (-size / 2), 0.5, (-size / 2))
				tween.ImageTransparency = 1

				local newTween = game:GetService("TweenService"):Create(c, TweenInfo.new(len, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), tween)

				newTween:Play()

				newTween.Completed:Wait()

				c:Destroy()
			end)
		end
	end

	function library.Create(title, titleUnder)
		local lib = {}

        if _G.Theme == "UltraDark" then
		    lib.UI = game:GetObjects("rbxassetid://11380178041")[1]
        elseif _G.Theme == "Aqua" then
	        lib.UI = game:GetObjects("rbxassetid://11380877718")[1]
        elseif _G.Theme == "Blood" then
            lib.UI = game:GetObjects("rbxassetid://11399536932")[1]
        else
            lib.UI = game:GetObjects("rbxassetid://6849423853")[1]
        end
    
		lib.UI.Parent = game.CoreGui

		lib.Tabs = {}

		lib.UI.Main.Left.UIName.Text = title
		lib.UI.Main.Left.GameName.Text = titleUnder

		local content,isReady;

		spawn(function()
			content, isReady = game.Players:GetUserThumbnailAsync(game.Players.LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size48x48)

			repeat wait() until content and isReady

			if _G.Settings.HidePicture == false then
				lib.UI.Main.Left.BottomLeft.Icon.Image = content
			else
				lib.UI.Main.Left.BottomLeft.Icon.Image = ""
			end
		end)


		if _G.Settings.HideName == false then
			lib.UI.Main.Left.BottomLeft.PlayerName.Text = game.Players.LocalPlayer.Name
		else
			lib.UI.Main.Left.BottomLeft.PlayerName.Text = "******"
		end

		lib.Notifications = {}
		lib.Notifications.Queue = {}
		lib.Notifications.Current = nil

		local MainFrame = lib.UI.Main

		--Dragging
		local dragging
		local dragInput
		local dragStart
		local startPos

		local function update(input)
			local delta = input.Position - dragStart
			game:GetService("TweenService"):Create(MainFrame, TweenInfo.new(0.1), {Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)}):Play()
		end

		MainFrame.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				dragStart = input.Position
				startPos = MainFrame.Position

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)

		MainFrame.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)

		game:GetService("UserInputService").InputChanged:Connect(function(input)
			if input == dragInput and dragging then
				update(input)
			end
		end)

		return setmetatable(lib, library)
	end

	function library:Tab(name, imageId)
		local tab = {}

		tab.Assets = {}

		tab.Lib = self
		tab.Tab = self.UI.Main.Left.Container.Template:Clone()
		tab.Tab.Name = name
		tab.Tab.TabName.Text = name
		tab.Tab.Parent = self.UI.Main.Left.Container

		if imageId then
			tab.Tab.TabIcon.Image = "rbxassetid://" .. imageId
		end

		table.insert(self.Tabs, tab)

		tab.Show = function()
			tab.Tab.Visible = true
		end

		tab.Hide = function()
			tab.Tab.Visible = false
		end
		
		self.UI.Main.Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            self.UI.Main.Container.CanvasSize = UDim2.new(0, self.UI.Main.Container.UIListLayout.AbsoluteContentSize.X, 0, self.UI.Main.Container.UIListLayout.AbsoluteContentSize.Y)
        end)

		local totalAssets = 0
		for i,v in pairs(self.Tabs) do
			totalAssets = totalAssets + 1
		end

		if totalAssets == 1 then
			-- first tab
			delay(0.3, function()
				for i,v in pairs(tab.Assets) do
					if v then
						v.Show()
					end
				end
				library:Tween(tab.Tab, TweenInfo.new(0.5), {BackgroundTransparency = 0})
			end)
		end

		tab.Tab.MouseButton1Down:Connect(function()
			for i,v in pairs(self.Tabs) do
				library:Tween(v.Tab, TweenInfo.new(0.5), {BackgroundTransparency = 1})
				for i,v in pairs(v.Assets) do
					v.Hide()
				end
			end

			for i,v in pairs(tab.Assets) do
				v.Show()
			end
			
			library:Tween(tab.Tab, TweenInfo.new(0.5), {BackgroundTransparency = 0.65})
		end)

		tab.Show()

		return setmetatable(tab, library)
	end

	function library:Button(text, info, callback)
		local button = {}

		button.callback = callback or function() end
		button.debounce = false
		button.showingInfo = false
		button.button = self.Lib.UI.Main.Container.Button:Clone()
		button.button.Parent = self.Lib.UI.Main.Container
		button.button:FindFirstChild("Text").Text = (text or "No Text")
		button.button.Name = (text or "No Text")

		button.Show = function()
			button.button.Visible = true
		end

		button.Hide = function()
			button.button.Visible = false
		end

		button.Click = function(x, y)
			if not button.debounce then
				if not x or not y then
					x = (button.button.AbsolutePosition.X/2)
					y = (button.button.AbsolutePosition.Y/2)
				end
				library:Ripple(self.Lib.UI, button.button, x, y, button)
				button.callback()
			end
		end

		button.button.Down.MouseButton1Down:Connect(function()
			if not button.showingInfo then
				library:DropInfo(button.button, info, button)
			else
				library:RetractInfo(button.button, button)
			end
		end)

		button.button.MouseButton1Down:Connect(function(x,y)
			button.Click(x, y)
		end)

		table.insert(self.Assets, button)

		return setmetatable(button, library)
	end

	function library:Toggle(text, info, state, callback, dont_run_on_start)
		local toggle = {}

		toggle.callback = callback or function() end
		toggle.debounce = false
		toggle.showingInfo = false
		toggle.state = state
		toggle.toggle = self.Lib.UI.Main.Container.Toggle:Clone()
		toggle.toggle.Parent = self.Lib.UI.Main.Container
		toggle.toggle:FindFirstChild("Text").Text = (text or "No Text")
		toggle.toggle.Name = (text or "No Text")

		toggle.Show = function()
			toggle.toggle.Visible = true
		end

		toggle.Hide = function()
			toggle.toggle.Visible = false
		end

		toggle.Refresh = function()
			if toggle.state then
				toggle.state = false
				toggle.debounce = true
				spawn(function()
					toggle.callback(toggle.state)
				end)
				local circle = toggle.toggle.Whole.Inner
				local newPosition = UDim2.new((circle.Position.X.Scale / 3), circle.Position.X.Offset, circle.Position.Y.Scale, circle.Position.Y.Offset)

				library:Tween(circle, TweenInfo.new(0.2), {Position = newPosition})
				library:Tween(circle.Parent, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(0, 0, 0)})

				wait(0.3)
				toggle.debounce = false
			else 
				toggle.state = true
				toggle.debounce = true
				spawn(function()
					toggle.callback(toggle.state)
				end)
				local circle = toggle.toggle.Whole.Inner
				local newPosition = UDim2.new((circle.Position.X.Scale * 3), circle.Position.X.Offset, circle.Position.Y.Scale, circle.Position.Y.Offset)

				library:Tween(circle, TweenInfo.new(0.2), {Position = newPosition})
				if _G.Theme == "Blood" then
				    library:Tween(circle.Parent, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(220, 0, 0)})
				else
				    library:Tween(circle.Parent, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(112, 112, 112)})
				end

				wait(0.3)
				toggle.debounce = false
			end
		end

		spawn(function()
			if toggle.state then
				toggle.debounce = true
				local circle = toggle.toggle.Whole.Inner
				local newPosition = UDim2.new((circle.Position.X.Scale * 3), circle.Position.X.Offset, circle.Position.Y.Scale, circle.Position.Y.Offset)

				library:Tween(circle, TweenInfo.new(0.2), {Position = newPosition})
				if _G.Theme == "Blood" then
				    library:Tween(circle.Parent, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(220, 0, 0)})
				else
				    library:Tween(circle.Parent, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(112, 112, 112)})
				end

				wait(0.3)
				toggle.debounce = false
			end
		end)

		toggle.toggle.Down.MouseButton1Down:Connect(function()
			if not toggle.showingInfo then
				library:DropInfo(toggle.toggle, info, toggle)
			else
				library:RetractInfo(toggle.toggle, toggle)
			end
		end)

		toggle.toggle.MouseButton1Down:Connect(function(x,y)
			if not toggle.debounce then
				library:Ripple(self.Lib.UI, toggle.toggle, x, y, toggle)
				toggle.Refresh()
			end
		end)

		if not dont_run_on_start then
			local ran, failed = pcall(function()
				toggle.callback(toggle.state)
			end)

			if ran then
				print("Ran sucessfully.")
			else
				print("Failed to run but no worries!", failed)
			end
		end

		table.insert(self.Assets, toggle)
		return setmetatable(toggle, library)
	end

	function library:Seperator()
		local seperator = {}

		seperator.asset = self.Lib.UI.Main.Container.Seperator:Clone()
		seperator.asset.Parent = self.Lib.UI.Main.Container

		seperator.Show = function()
			seperator.asset.Visible = true
		end

		seperator.Hide = function()
			seperator.asset.Visible = false
		end

		table.insert(self.Assets, seperator)
		return setmetatable(seperator, library)
	end

	function library:Slider(name, min, max, starting, callback)
		local slider = {}

		slider.callback = callback or function() end
		slider.min = min or 1
		slider.max = max or 100

		slider.asset = self.Lib.UI.Main.Container.Slider:Clone()
		slider.asset.Name = (name or "None")
		slider.asset:FindFirstChild("Slider").Text = (name or "None")
		slider.asset.Parent = self.Lib.UI.Main.Container
		slider.holdAsset = self.Lib.UI.Main.Container
		
		slider.dragging = false

		slider.holdAsset = slider.asset.Holder.Holder.Circle

		local mouse = game.Players.LocalPlayer:GetMouse()
		local uis = game:GetService("UserInputService")
		local Value;

		local bound = slider.holdAsset.Parent.Parent.AbsoluteSize.X
		
		--[[
		function slider.Refresh(new, bool)
			local pos = (bound * (new/slider.max))

			library:Tween(slider.holdAsset.Parent, TweenInfo.new(0.1), {Size = UDim2.new(0, pos, 1, 0)})

			slider.asset.Percentage.Text = new
			
			if bool then
				slider.callback(new)
			end
		end
		
		slider.Refresh(starting)

		slider.holdAsset.MouseButton1Down:Connect(function()
			local Num = (((tonumber(slider.max) - tonumber(slider.min)) / bound) * slider.holdAsset.Parent.AbsoluteSize.X) + tonumber(slider.min)
			local IsDecimal = select(2, math.modf(starting)) ~= 0
			Value = (not IsDecimal and math.ceil(Num)) or (IsDecimal and library:RoundNumber(Num, 1)) or 0
			pcall(function()
				slider.callback(Value)
			end)
			library:Tween(slider.holdAsset.Parent, TweenInfo.new(0.1), {Size = UDim2.new(0, math.clamp(mouse.X - slider.holdAsset.Parent.AbsolutePosition.X, 0, bound), 1, 0)})
			moveconnection = mouse.Move:Connect(function()
				slider.asset.Percentage.Text = Value
				local Num = (((tonumber(slider.max) - tonumber(slider.min)) / bound) * slider.holdAsset.Parent.AbsoluteSize.X) + tonumber(slider.min)
				local IsDecimal = select(2, math.modf(starting)) ~= 0
				Value = (not IsDecimal and math.ceil(Num)) or (IsDecimal and library:RoundNumber(Num, 1))
				pcall(function()
					slider.callback(Value)
				end)
				library:Tween(slider.holdAsset.Parent, TweenInfo.new(0.1), {Size = UDim2.new(0, math.clamp(mouse.X - slider.holdAsset.Parent.AbsolutePosition.X, 0, bound), 1, 0)})
			end)
			releaseconnection = uis.InputEnded:Connect(function(Mouse)
				if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
					local Num = (((tonumber(slider.max) - tonumber(slider.min)) / bound) * slider.holdAsset.Parent.AbsoluteSize.X) + tonumber(slider.min)
					local IsDecimal = select(2, math.modf(starting)) ~= 0
					Value = (not IsDecimal and math.ceil(Num)) or (IsDecimal and library:RoundNumber(Num, 1)) 
					pcall(function()	
						slider.callback(Value)
					end)
					library:Tween(slider.holdAsset.Parent, TweenInfo.new(0.1), {Size = UDim2.new(0, math.clamp(mouse.X - slider.holdAsset.Parent.AbsolutePosition.X, 0, bound), 1, 0)})
					moveconnection:Disconnect()
					releaseconnection:Disconnect()
					
					wait()
					slider.Refresh(Value, true)
				end
			end)
		end)--]]

		local IsDecimal = select(2, math.modf(starting)) ~= 0

		local function move(input)
			
			local pos1 =
				UDim2.new(
					math.clamp((input.Position.X - slider.holdAsset.Parent.AbsolutePosition.X) / bound, 0, 1),
					0,
					1,
					0
				)
			slider.holdAsset.Parent:TweenSize(pos1, "Out", "Sine", 0.1, true)
			local value = (IsDecimal and library:RoundNumber((((pos1.X.Scale * slider.max) / slider.max) * (slider.max - slider.min) + slider.min), 1) or math.floor((((pos1.X.Scale * slider.max) / slider.max) * (slider.max - slider.min) + slider.min)))
			
			if _G.Theme ~= "Aqua" then
			    slider.asset.Percentage.Text = tostring(value)
			else
			    slider.asset.Holder.Frame.Percentage.Text = tostring(value)
			end
			
			pcall(slider.callback, value)
		end	
		
		slider.holdAsset.InputBegan:Connect(
			function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slider.dragging = true
				end
			end
		)
		slider.holdAsset.InputEnded:Connect(
			function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slider.dragging = false
				end
			end
		)

		game:GetService("UserInputService").InputChanged:Connect(
		function(input)
			if slider.dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
				move(input)
			end
		end
		)

		slider.Refresh = function(new, bool)

			slider.holdAsset.Parent:TweenSize(UDim2.new((new or 0) / slider.max, 0, 1, 0), "Out", "Sine", 0.1, true)
			if _G.Theme ~= "Aqua" then
			    slider.asset.Percentage.Text = tostring(new and (IsDecimal and library:RoundNumber(((new / slider.max) * (slider.max - slider.min) + slider.min), 1) or math.floor((new / slider.max) * (slider.max - slider.min) + slider.min) or 0))
			else
                slider.asset.Holder.Frame.Percentage.Text = tostring(new and (IsDecimal and library:RoundNumber(((new / slider.max) * (slider.max - slider.min) + slider.min), 1) or math.floor((new / slider.max) * (slider.max - slider.min) + slider.min) or 0))
			end
        
			if bool then
				pcall(slider.callback, new)
			end
		end

		slider.Refresh(starting, false)

		slider.Show = function()
			slider.asset.Visible = true
		end

		slider.Hide = function()
			slider.asset.Visible = false
		end

		table.insert(self.Assets, slider)
		return setmetatable(slider, library)
	end

	function library:Dropdown(name, list, callback)
		local dropdown = {}

		dropdown.table = list
		dropdown.callback = callback or function() end

		dropdown.debounce = false

		dropdown.asset = self.Lib.UI.Main.Container.Dropdown:Clone()
		dropdown.asset.Parent = self.Lib.UI.Main.Container

		dropdown.assets = {}
		dropdown.connections = {}

		dropdown.asset:FindFirstChild("Text").Text = dropdown.table[1]

		function dropdown.Refresh()
			if not table.find(dropdown.table, dropdown.asset:FindFirstChild("Text").Text) then
				dropdown.asset:FindFirstChild("Text").Text = dropdown.table[1]
			end
		end

		dropdown.showing = false

		dropdown.asset.MouseButton1Down:Connect(function(x, y)
			if not dropdown.debounce then
				library:Ripple(self.Lib.UI, dropdown.asset, x, y, {["showingInfo"] = false})
				if #dropdown.assets < 1 then
					dropdown.debounce = true
					local passed = false
					local num = 0
					local assets = {}
					for i,v in ipairs(dropdown.asset.Parent:GetChildren()) do
						if v.ClassName ~= "Folder" and v.ClassName ~= "UIListLayout" and v.ClassName ~= "UIAspectRatioConstraint"  and v.Visible and not passed and v == dropdown.asset then
							passed = true
						end

						if passed then
							if v ~= dropdown.asset then
								num = num + 1
								v.Parent = v.Parent.Hold
								table.insert(assets, v)
							end
						end
					end

					library:Tween(dropdown.asset["Down"], TweenInfo.new(0.3), {Rotation = 180})

					for i = 1, #dropdown.table do
						local newDrop = self.Lib.UI.Main.Container.DropdownDrop:Clone()
						newDrop.Parent = self.Lib.UI.Main.Container


						newDrop:FindFirstChild("Text").Text = dropdown.table[i]

						newDrop.Visible = true
						library:Tween(newDrop, TweenInfo.new(0.2), {BackgroundTransparency = 0})
						library:Tween(newDrop:FindFirstChild("Text"), TweenInfo.new(0.3), {TextTransparency = 0})

						local thing = {}

						thing.Asset = newDrop

						thing.Show = function()
							dropdown.assets[i].Visible = true
						end

						thing.Hide = function()
							dropdown.assets[i].Visible = false
						end

						table.insert(dropdown.assets, newDrop)
						table.insert(self.Assets, thing)

						local con;

						con = thing.Asset.MouseButton1Down:Connect(function(x, y)
							if dropdown.showing then
								table.insert(dropdown.connections, con)
								dropdown.debounce = true
								library:Tween(dropdown.asset["Down"], TweenInfo.new(0.3), {Rotation = 0})

								if dropdown.asset:FindFirstChild("Text").Text ~= dropdown.table[i] then
									dropdown.asset:FindFirstChild("Text").Text = dropdown.table[i]
									dropdown.callback(dropdown.table[i])
								end						

								for i,v in pairs(dropdown.connections) do
									v:Disconnect()
									table.remove(dropdown.connections, i)
								end

								for i = #dropdown.assets, 1, -1 do
									library:Tween(dropdown.assets[i], TweenInfo.new(0.2), {BackgroundTransparency = 1})
									library:Tween(dropdown.assets[i]:FindFirstChild("Text"), TweenInfo.new(0.3), {TextTransparency = 1})

									game:GetService("RunService").RenderStepped:Wait()

									dropdown.assets[i]:Destroy()

									for a,v in pairs(self.Assets) do
										if v.Asset == dropdown.assets[i] then
											table.remove(self.Assets, a)
										end
									end				
									table.remove(dropdown.assets, i)
								end

								dropdown.debounce = false
							end
						end)

						game:GetService("RunService").RenderStepped:Wait()
					end

					for i,v in ipairs(assets) do
						v.Parent = v.Parent.Parent
					end

					for i,v in pairs(assets) do
						table.remove(assets, i)
					end

					dropdown.showing = true
					dropdown.debounce = false
				else
					dropdown.debounce = true
					library:Tween(dropdown.asset["Down"], TweenInfo.new(0.3), {Rotation = 0})
					for i = #dropdown.assets, 1, -1 do
						library:Tween(dropdown.assets[i], TweenInfo.new(0.2), {BackgroundTransparency = 1})
						library:Tween(dropdown.assets[i]:FindFirstChild("Text"), TweenInfo.new(0.3), {TextTransparency = 1})

						game:GetService("RunService").RenderStepped:Wait()

						dropdown.assets[i]:Destroy()

						for a,v in pairs(self.Assets) do
							if v.Asset == dropdown.assets[i] then
								table.remove(self.Assets, a)
							end
						end				
						table.remove(dropdown.assets, i)
					end
					dropdown.showing = false
					dropdown.debounce = false
				end
			end
		end)

		dropdown.Hide = function()
			dropdown.asset.Visible = false
		end

		dropdown.Show = function()
			dropdown.asset.Visible = true
		end

		table.insert(self.Assets, dropdown)
		return setmetatable(dropdown, library)
	end

	function library:Label(text)
		local label = {}

		label.asset = self.Lib.UI.Main.Container.Label:Clone()
		label.asset.Parent = self.Lib.UI.Main.Container

		label.class = "label"

		function label.Refresh(newText)
			label.asset:FindFirstChild("Text").Text = newText
		end

		label.Refresh(text)

		label.Show = function()
			label.asset.Visible = true
		end

		label.Hide = function()
			label.asset.Visible = false
		end

		table.insert(self.Assets, label)
		return setmetatable(label, library)
	end

	function library:TextBox(text, callback)
		local textbox = {}
		
		textbox.Name = text
		textbox.callback = callback or function() end
		textbox.class = "textbox"
		textbox.debounce = false
		
		textbox.asset = self.Lib.UI.Main.Container.TextBox:Clone()
		textbox.asset.Parent = self.Lib.UI.Main.Container
		textbox.asset:FindFirstChild("Text").Text = text
		
		textbox.typing = false
		
		textbox.connections = {}
		
		textbox.asset.Outline.Box.Focused:Connect(function()
			if not textbox.typing then
				textbox.asset.Outline.Box:ReleaseFocus()
			end
		end)
		
		textbox.asset.MouseButton1Down:Connect(function(x,y)
			if not textbox.debounce then
				textbox.debounce = true
				textbox.typing = true
				library:Ripple(self.Lib.UI, textbox.asset, x, y, textbox)
				library:Tween(textbox.asset.Outline, TweenInfo.new(0.35, Enum.EasingStyle.Quart), {
					Size = UDim2.new((textbox.asset.Outline.Size.X.Scale + 0.225), textbox.asset.Outline.Size.X.Offset, textbox.asset.Outline.Size.Y.Scale, textbox.asset.Outline.Size.Y.Offset),
					Position = UDim2.new((textbox.asset.Outline.Position.X.Scale - 0.1125), textbox.asset.Outline.Position.X.Offset, textbox.asset.Outline.Position.Y.Scale, textbox.asset.Outline.Position.Y.Offset)
				})
				wait(0.35)
				textbox.asset.Outline.Box:CaptureFocus()
				textbox.asset.Outline.Box.FocusLost:Wait()
				textbox.typing = false
				library:Tween(textbox.asset.Outline, TweenInfo.new(0.35, Enum.EasingStyle.Quart), {
					Size = UDim2.new((textbox.asset.Outline.Size.X.Scale - 0.225), textbox.asset.Outline.Size.X.Offset, textbox.asset.Outline.Size.Y.Scale, textbox.asset.Outline.Size.Y.Offset),
					Position = UDim2.new((textbox.asset.Outline.Position.X.Scale + 0.1125), textbox.asset.Outline.Position.X.Offset, textbox.asset.Outline.Position.Y.Scale, textbox.asset.Outline.Position.Y.Offset),
				})
				
				textbox.callback(textbox.asset.Outline.Box.Text)
				
				wait(0.35)
				
				textbox.debounce = false
			end
		end)

		textbox.Refresh = function(NewText)
			textbox.asset.Outline.Box.Text = NewText
			pcall(textbox.callback, NewText)
		end
		
		textbox.Show = function()
			textbox.asset.Visible = true
		end
		
		textbox.Hide = function()
			textbox.asset.Visible = false
		end
		
		table.insert(self.Assets, textbox)
		return setmetatable(textbox, library)
	end

	function library:Keybind(name, key, blacklist, callback)
		local keybind = {}

		if (#blacklist) == 0 then
			blacklist = nil
		end

		keybind.key_blacklist = blacklist or {"W", "A", "S", "D"}

		keybind.ValidKey = function(key)
			return (typeof(key) == "EnumItem")
		end

		keybind.GetKeystringFromEnum = function(key)
			key = tostring(key)
			return ( string.sub( key,  14, #key ) )
		end

		keybind.IsNotMouse = function(key)
			return (key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.MouseButton2)
		end

		keybind.callback = callback or function() end
		keybind.asset = self.Lib.UI.Main.Container.Keybind:Clone()
		keybind.asset.Parent = self.Lib.UI.Main.Container

		keybind.class = "keybind"
		keybind.debounce = false

		keybind.key = (keybind.ValidKey(key) and key) or Enum.KeyCode.E --// default key

		keybind.asset:FindFirstChild("Text").Text = name
		keybind.asset:FindFirstChild("RoundHolder").TextLabel.Text = keybind.GetKeystringFromEnum(keybind.key)

		keybind.in_change = false
		keybind.change_conn = nil

		keybind.KeyPress = game:GetService("UserInputService").InputBegan:Connect(function(input, gpe)
			if gpe then return end

			if input.KeyCode == keybind.key and not keybind.in_change then
				pcall(keybind.callback)
			end
		end)

		keybind.asset.MouseButton1Down:Connect(function(x,y)
			if not keybind.debounce then
				keybind.debounce = true
				keybind.in_change = true
				library:Ripple(self.Lib.UI, keybind.asset, x, y, keybind)

				local contin = false

				local cache = {}
				cache.OldText = keybind.asset:FindFirstChild("Text").Text
				cache.OldKey = keybind.asset:FindFirstChild("RoundHolder").TextLabel.Text

				keybind.asset:FindFirstChild("Text").Text = (cache.OldText .. " [press enter to cancel]")
				keybind.asset:FindFirstChild("RoundHolder").TextLabel.Text = "..."

				keybind.change_conn = game:GetService("UserInputService").InputBegan:Connect(function(input, gpe)
					if gpe then return end

					if keybind.IsNotMouse(input) then return end

					if input.KeyCode == Enum.KeyCode.Return then
						contin = true
						keybind.asset:FindFirstChild("RoundHolder").TextLabel.Text = cache.OldKey
						keybind.change_conn:Disconnect()
						return  
					end

					if not table.find(keybind.key_blacklist, keybind.GetKeystringFromEnum(input.KeyCode)) then
						keybind.key = input.KeyCode
						keybind.asset:FindFirstChild("RoundHolder").TextLabel.Text = keybind.GetKeystringFromEnum(keybind.key)
						contin = true

						pcall(keybind.callback, keybind.GetKeystringFromEnum(keybind.key))

						keybind.change_conn:Disconnect()
					end
				end)

				repeat wait() until contin

				keybind.asset:FindFirstChild("Text").Text = cache.OldText
				cache = nil
				keybind.in_change = false

				wait(0.5)
				keybind.debounce = false
			end
		end)

		keybind.Show = function()
			keybind.asset.Visible = true
		end 

		keybind.Hide = function()
			keybind.asset.Visible = false
		end 

		table.insert(self.Assets, keybind)
		return setmetatable(keybind, library)
	end

	function library:Notification(text)
		local notification = {}
		notification.NotifText = text
		notification.Bind = nil
		table.insert(self.Lib.Notifications.Queue, notification)
		
		spawn(function()

			for notif = 1, #self.Lib.Notifications.Queue do
				repeat wait() until not self.Lib.Notifications.Current
				self.Lib.Notifications.Current = self.Lib.Notifications.Queue[notif]
				
				local Cover = self.Lib.UI.Main.BackgroundCover
				Cover.Visible = true
				
				Cover.Notification.NotificationLabel.Text = (self.Lib.Notifications.Queue[notif].NotifText or "No text provided")
				
				local TweenData = {
					Transparency = 0.5
				}
				
				local CoverTween = game:GetService("TweenService"):Create(Cover, TweenInfo.new(0.5), TweenData)
				CoverTween:Play()
				CoverTween.Completed:Wait()
				
				local TweenData2 = {
					Position = UDim2.new(0.5, 0, 0.7, 0)
				}	
				
				local NotifTween = game:GetService("TweenService"):Create(Cover.Notification, TweenInfo.new(0.5), TweenData2)
				NotifTween:Play()
				NotifTween.Completed:Wait()
				
				self.Lib.Notifications.Queue[notif].Bind = Cover.Notification.Ok.MouseButton1Click:Connect(function()
					local TweenData3 = {
						Position = UDim2.new(0.5, 0, 1, 0)
					}	

					local NotifTween2 = game:GetService("TweenService"):Create(Cover.Notification, TweenInfo.new(0.5), TweenData3)
					NotifTween2:Play()
					NotifTween2.Completed:Wait()
					
					local TweenData4 = {
						Transparency = 1
					}

					local CoverTween2 = game:GetService("TweenService"):Create(Cover, TweenInfo.new(0.5), TweenData4)
					CoverTween2:Play()
					CoverTween2.Completed:Wait()
					Cover.Visible = false
					
					self.Lib.Notifications.Queue[notif].Bind:Disconnect()			
					table.remove(self.Lib.Notifications.Queue, notif)
					
					self.Lib.Notifications.Current = nil
				end)
			end

		end)
	end

	function library:Click()
		self.Click()
	end

	function library:Update(new, new2, new3)
		if self.table then
			self.table = new
			self.Refresh()
		elseif self.min and self.max then
			self.min = new
			self.max = new2
			self.Refresh(new3 or self.max/2, true)
		elseif self.toggle then
			if new ~= self.state then
				--self.state = (not new)
				self.Refresh()
			end
		elseif self.class == "label" then
			self.Refresh(new)
		elseif self.class == "textbox" then
			self.Refresh(new)
		end
	end

	function library:ToggleUI()
		self.UI.Enabled = not self.UI.Enabled 
	end
    print("ui loaded #2")
	if _G.key1 == nil or _G.key2 == nil then
		game.StarterGui:SetCore("SendNotification", {
			Title = "Security";
			Text = "No keys specified.",
			Duration = 3
		})
	end

	local UserHWID = (_G.key1.._G.key2)

	local HttpService = game:GetService("HttpService")

	local http_request = http_request or request or HttpPost or syn.request or http.request 


	local function whitelisted(t)
		local body = http_request({Url = 'https://httpbin.org/get'; Method = 'GET'}).Body;
		local decoded = game:GetService('HttpService'):JSONDecode(body)
		local hwid_list = {"fingerprint", "Krnl-Hwid", "shadow_hardware", "Syn-Fingerprint", "Exploit-Guid", "Proto-User-Identifier", "Sentinel-Fingerprint", "Fingerprint", "SW-Fingerprint", "Sw-Fingerprint"};
		local hwid = "";	

		for i, v in next, hwid_list do
			if decoded.headers[v] then
				hwid = decoded.headers[v];
				break
			end
		end

		if t then
			return (UserHWID == hwid)
		else
			return hwid
		end
	end
    
	local function SendMessage(webhook, msg, title, hidePicture)

		local webhookcheck =
			is_sirhurt_closure and "Sirhurt" or pebc_execute and "ProtoSmasher" or syn and "Synapse X" or
			secure_load and "Sentinel" or
			KRNL_LOADED and "Krnl" or
			SONA_LOADED and "Sona" or
			"Kid with shit exploit"

		local url = webhook

		local data;
		if hidePicture then
			data = {
				["embeds"] = {
					{
						["title"] = title,
						["description"] = msg,
						["type"] = "rich",
						["color"] = tonumber(0x7269da)
					}
				}
			}
			
		else
			data = {
				["embeds"] = {
					{
						["title"] = title,
						["description"] = msg,
						["type"] = "rich",
						["color"] = tonumber(0x7269da),
						["image"] = {
							["url"] = "http://www.roblox.com/Thumbs/Avatar.ashx?x=150&y=150&Format=Png&username=" .. tostring(game:GetService("Players").LocalPlayer.Name)
						}
					}
				}
			}
		end

		repeat wait() until data
		local newdata = game:GetService("HttpService"):JSONEncode(data)

        
		local headers = {
			["Content-Type"] = "application/json"
		}
		request = http_request or request or HttpPost or syn.request or http.request
		local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
		request(abcdef)
	end

	local PlayerHWID = tostring(whitelisted())
	local isWhitelisted = whitelisted("check")

	local exploit = is_sirhurt_closure and "Sirhurt" or pebc_execute and "ProtoSmasher" or syn and "Synapse X" or secure_load and "Sentinel" or KRNL_LOADED and "KRNL" or SONA_LOADED and "Sona" or isexecutorclosure and "Script-Ware" or "Some shitty exploit idk"
	local message = "Premium script attempted use:\nRoblox Name: "..game.Players.LocalPlayer.Name.."\nRoblox Account: https://www.roblox.com/users/"..game.Players.LocalPlayer.UserId.."/profile".."\nHWID: "..PlayerHWID.."\nKey: "..UserHWID.."\nWhitelisted: "..tostring(isWhitelisted).."\nExploit: "..exploit.."\nAutohopping: logging this feature is disabled 4 now"

	SendMessage("https://websec.services/send/63618a759ad22e8b19d02ba7", message, "Xenon Security")
    
	local function click(button, manual)
		for i, v in pairs(getconnections(button.MouseButton1Click)) do
			if manual then
				v.Function()
			else
				v:Fire()
			end
		end
	end

	local neededFunctions = {getfenv, getsenv, hookfunction, getrawmetatable, getscriptclosure, getnamecallmethod, http_request, setclipboard}
	local missingSupport = ""

	for i,v in pairs(neededFunctions) do	
		if not v then
			if missingSupport == "" then
				missingSupport = missingSupport..tostring(v)
			else
				missingSupport = missingSupport .. " & ".. tostring(v)
			end
		end
	end

	if isWhitelisted then
	    --[[
        local body = http_request({Url = 'http://xenonv2.co.uk/hwid.php'; Method = 'GET'}).Body;
        local hwid = body
		
        pcall(function()
            loadstring(game:HttpGet("https://pastebin.com/raw/3vqY3hgi"))()

            if table.find(_G.Gayness, hwid) then
                game.Players.LocalPlayer:Kick("Gay mf")
            end
        end)]]--
		
        print("got through whitelist, #3")
		local Func = {	}

		Func.IsSBR = function()
			return (game.PlaceId == 4643697430) 
		end

		local prompt = game:GetService("CoreGui"):FindFirstChild("promptOverlay", true)
		prompt.ChildAdded:Connect(function(child)
			if typeof(child) == "Instance" and child.Name == "ErrorPrompt" and child.ClassName == "Frame" then
				local Error = child:FindFirstChild("ErrorMessage", true)
				repeat wait() until Error.Text ~= "Label"
				print(Error.Text)
				if Error.Text:find("kick") or Error.Text:find("conn") or Error.Text:find("rejoin") then
					print("We were kicked/disconnected, rejoining")
					wait(1)
					game:GetService("TeleportService"):Teleport(2809202155, game.Players.LocalPlayer)
				end
			end
		end)
		
		local function SendNotification(Titty, Texty)
            game:GetService("StarterGui"):SetCore("SendNotification",{Title = Titty, Text = Texty})
        end


		local Player = game:GetService("Players").LocalPlayer
		repeat wait() until Player.Character

		if not Player.Character:FindFirstChild("RemoteEvent") then
			repeat wait() until (Player.PlayerGui:FindFirstChild("LoadingScreen1"))
		end
		
		if getgenv().IsAutohopping then
			repeat wait() until Player.PlayerGui:FindFirstChild("LoadingScreen") or Player.PlayerGui:FindFirstChild("LoadingScreen1") 
		end

        pcall(function()
    		if Player.PlayerGui:FindFirstChild("LoadingScreen1") then
    			local Skip = Player.PlayerGui:FindFirstChild("LoadingScreen1").Frame.LoadingFrame.BarFrame.Skip
    			repeat wait() until Skip.Visible
    
    			local LoadingScreen1 = Player.PlayerGui:FindFirstChild("LoadingScreen1")
    
    			click(Skip.TextButton, true)
    
    			repeat wait() until not LoadingScreen1.Parent
    		end	
    
    		if Player.PlayerGui:FindFirstChild("LoadingScreen") then
    			local Prestige = Player.PlayerStats.Prestige.Value
    			Player.PlayerStats.Prestige.Value = 0
    
    			local LoadingScreen = Player.PlayerGui:FindFirstChild("LoadingScreen")
    
    			click(LoadingScreen.Play, true)
    
    			repeat wait() until not LoadingScreen.Parent
    
    			Player.PlayerStats.Prestige.Value = Prestige
    		end
    	end)
        print("skipped loading screen #4")

        local Hook;
        Hook = hookmetamethod(game, '__namecall', newcclosure(function(self, ...)
            local args = {...}
            local method =  getnamecallmethod()
            if method == "InvokeServer" then
                if args[1] == "idklolbrah2de" then
                    return "  ___XP DE KEY"
                end
            end
            if method == "FireServer" and args[1] == "Reset" and args[3] ~= "XENON_ON_TOP" then
                return task.wait(9e9)
            end
            if (method == "InvokeServer" or method == "InvokeClient") and args[1] == "Reset" and args[3] ~= "XENON_ON_TOP" then
                return task.wait(9e9)
            end
            return Hook(self, ...)
        end))
        
        local NewEvent = Instance.new("BindableEvent")
        NewEvent.Event:Connect(function()
                        
        local args = {
            [1] = "Reset",
            [2] = {
                ["Anchored"] = false
            },
                [3] = "XENON_ON_TOP"
            }
        
            game:GetService("Players").LocalPlayer.Character.RemoteEvent:FireServer(unpack(args))
        end)
        
        game:GetService("StarterGui"):SetCore("ResetButtonCallback", NewEvent)
        
        --------------------------------------------------------------------------------
		        
		local UI = library.Create("Zantax V1.11 BETA", "YBA PvP UI")
		local Credits = UI:Tab("Credits & Info", 6026568227)
		
		Credits:Label("Owner and Dev of Zantax:")
		Credits:Label("vez#1944")
		Credits:Seperator()
		Credits:Label("Contributing Devs of Zantax:")
		Credits:Label("Enxquity#9567")
		Credits:Label("dank#0421")
		Credits:Seperator()
		Credits:Button("Copy Discord Invite", "", function()
		    setclipboard("https://discord.com/invite/CftwEcqWF2")
		end)
		
		local MainTab = UI:Tab("Main", 6031360365)
		local FightingTab = UI:Tab("Fighting", 6031360365)
		local PlayerTab = UI:Tab("Player", 6023426915)
		local StandTab = UI:Tab("Stand", 6034744057)
		local MiscTab = UI:Tab("Misc", 6022668951)
		
		-- IGNORE --
		local ActuallyEnabled = false
		------------
		
		local Settings = {
		    ["Speed"] = 100,
		    ["Jump"] = 100,
            ["FlySpeed"] = 5,
            ["FlySpeed2"] = 0.5,
            ["AttachedTarget"] = "",
            ["Distance"] = 2.7,
            ["Distance2"] = 10,
            ["Height"] = 15,
            ["Position"] = "Above",
            ["PilotanySpeed"] = 0.5
        }
        
        local function M1()
            game.Players.LocalPlayer.Character.RemoteFunction:InvokeServer("Attack", "m1")
        end
        
        local function M2()
            game.Players.LocalPlayer.Character.RemoteFunction:InvokeServer("Attack", "m2")
        end
        
        local function Barrage()
            game.Players.LocalPlayer.Character.RemoteEvent:FireServer("InputBegan", {["Input"] = Enum.KeyCode.E})
        end
        
        local function BarrageFinisher()
            game.Players.LocalPlayer.Character.RemoteEvent:FireServer("InputBegan", {["Input"] = Enum.KeyCode.R})
        end

        -- INF DASH GET STROKE --
        Func.Get_Stroke = function()
            StrokeDir = 180
            local Anim = "6926086304"
            
            if (game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A)) then
                StrokeDir = 90
                Anim = "6926086567"
            end
            
            if (game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D)) and StrokeDir == 180 then
                StrokeDir = -90
                Anim = "6926086883"
            end
            
            if (game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W)) and StrokeDir == 180 then
                StrokeDir = 0
                Anim = "6926086032"
            end
            
            return StrokeDir, Anim
        end
        
        --------------------------------------------------------------------------------
		
		PlayerTab:Slider("Speed", 16, 500, 100, function(IntVal)
			Settings.Speed = IntVal
		end)
		
		PlayerTab:Toggle("Speed", "Sets your walkspeed", false, function(BooleanVal)
			if BooleanVal then
				WSLoop = game:GetService("RunService").RenderStepped:Connect(function()
					if Player.Character and Player.Character:FindFirstChild("Humanoid") then
						Player.Character.Humanoid.WalkSpeed = Settings.Speed
					end
				end)
			else
				WSLoop:Disconnect()
			end
		end)

		PlayerTab:Slider("Jump", 50, 1000, 100, function(IntVal)
			Settings.Jump = IntVal
		end)

		PlayerTab:Toggle("Jump", "Sets your jump power", false, function(BooleanVal)
			if BooleanVal then
				JPLoop = game:GetService("RunService").RenderStepped:Connect(function()
					if Player.Character and Player.Character:FindFirstChild("Humanoid") then
						Player.Character.Humanoid.JumpPower = Settings.Jump
					end
				end)
			else
				JPLoop:Disconnect()
			end
		end)
		
		PlayerTab:Seperator()
		
		PlayerTab:Toggle("Player Fly", "Q = Down, E = Up, Move = WASD", false, function(t)
            if t == true then
                local Keys_Pressed = {
                	["Q"] = 0;
                	["E"] = 0;
                	["W"] = 0;
                	["A"] = 0;
                	["S"] = 0;
                	["D"] = 0;
                }
                local Key_Info = {
                	["Q"] = {
                		["Operator"] = "-";
                		["Direction"] = "UpVector";
                	};
                	["E"] = {
                		["Operator"] = "+";
                		["Direction"] = "UpVector";
                	};
                	["W"] = {
                		["Operator"] = "+";
                		["Direction"] = "LookVector";
                	};
                	["A"] = {
                		["Operator"] = "-";
                		["Direction"] = "RightVector";
                	};
                	["S"] = {
                		["Operator"] = "-";
                		["Direction"] = "LookVector";
                	};
                	["D"] = {
                		["Operator"] = "+";
                		["Direction"] = "RightVector";
                	};
                }
                
                
                --// Begin fly script
                
                --// Variables
                local Players = game:GetService("Players")
                local UIS = game:GetService("UserInputService")
                local RunService = game:GetService("RunService")
                local TweenService = game:GetService("TweenService")
                
                --// Neat functions
                local function GetKeyFromEnum(enum)
                	return enum.KeyCode.Name
                end
                
                local function GetMass(Model)
                	local Mass = 0;
                	for i,v in pairs(Model:GetDescendants()) do
                		if v:IsA("BasePart") then Mass += v:GetMass() end
                	end
                	return Mass;
                end
                
                local function Math(Operator, A, B)
                	if Operator == "-" then return A-B elseif Operator == "+" then return A+B end
                end
                
                --// Key detection
                UIS.InputBegan:Connect(function(Key, Typing)
                	if Typing then return end
                	
                	local Key_String = GetKeyFromEnum(Key)
                	if Keys_Pressed[Key_String] then
                		Keys_Pressed[Key_String] = 1
                	end
                end)
                
                UIS.InputEnded:Connect(function(Key, Typing)
                	if Typing then return end
                	
                	local Key_String = GetKeyFromEnum(Key)
                	if Keys_Pressed[Key_String] then
                		Keys_Pressed[Key_String] = 0
                	end
                end)
                
                --// Fly loop
                
                _G.FlyLoop = RunService.RenderStepped:Connect(function()
                	local Character = Player.Character
                	if not Character then return end
                	Character.Humanoid.WalkSpeed = 0; Character.Humanoid.JumpPower = 0;
                	
                	Character.PrimaryPart.CFrame = CFrame.new(Character.PrimaryPart.Position, Character.PrimaryPart.Position + workspace.CurrentCamera.CFrame.LookVector)
                	local CharacterMass = GetMass(Character)
                	--// Calculate new velocity
                	
                    local Velocity = Vector3.new(0, CharacterMass/workspace.Gravity, 0) --// Lets try not to decend
                    for i,v in pairs(Keys_Pressed) do
                        if v == 0 then else
                        Velocity = Math(Key_Info[i].Operator, Velocity, Character.PrimaryPart.CFrame[Key_Info[i].Direction] * Settings.FlySpeed * CharacterMass) end
                    end
                	
                	Character.PrimaryPart.Velocity = Velocity
                end)
            else
                _G.FlyLoop:Disconnect()
                Player.Character.Humanoid.WalkSpeed = 16
            end
        end)
        
        PlayerTab:Slider("Fly Speed", 1,15,2, function(t)
            Settings.FlySpeed = t
        end)
		
		StandTab:Button("Infinite Stand-Pilot Range", "", function()
		    if Player.Character and Player.Character:FindFirstChild("StandMorph") and Player.Character.StandMorph:FindFirstChild("IsPiloting") then
		        Player.Character.StandMorph.IsPiloting.Value = 99999
		    end
		end)
		
		StandTab:Seperator()
		
		StandTab:Slider("Pilot Speed", 5,300,20, function(t)
		    if Player.Character and Player.Character:FindFirstChild("StandMorph") and Player.Character.StandMorph:FindFirstChild("PilotSpeed") then
		        Player.Character.StandMorph.PilotSpeed.Value = t
		    end
		end)
		
		StandTab:Seperator()
		
		StandTab:Toggle("Pilot Fly", "Q = Down, E = Up, Move = WASD", false, function(t)
            if t == true then
                local Keys_Pressed = {
                	["Q"] = 0;
                	["E"] = 0;
                	["W"] = 0;
                	["A"] = 0;
                	["S"] = 0;
                	["D"] = 0;
                }
                local Key_Info = {
                	["Q"] = {
                		["Operator"] = "-";
                		["Direction"] = "UpVector";
                	};
                	["E"] = {
                		["Operator"] = "+";
                		["Direction"] = "UpVector";
                	};
                	["W"] = {
                		["Operator"] = "+";
                		["Direction"] = "LookVector";
                	};
                	["A"] = {
                		["Operator"] = "-";
                		["Direction"] = "RightVector";
                	};
                	["S"] = {
                		["Operator"] = "-";
                		["Direction"] = "LookVector";
                	};
                	["D"] = {
                		["Operator"] = "+";
                		["Direction"] = "RightVector";
                	};
                }
                
                
                --// Begin fly script
                
                --// Variables
                local Players = game:GetService("Players")
                local UIS = game:GetService("UserInputService")
                local RunService = game:GetService("RunService")
                local TweenService = game:GetService("TweenService")
                
                --// Neat functions
                local function GetKeyFromEnum(enum)
                	return enum.KeyCode.Name
                end
                
                local function GetMass(Model)
                	local Mass = 0;
                	for i,v in pairs(Model:GetDescendants()) do
                		if v:IsA("BasePart") then Mass += v:GetMass() end
                	end
                	return Mass;
                end
                
                local function Math(Operator, A, B)
                	if Operator == "-" then return A-B elseif Operator == "+" then return A+B end
                end
                
                --// Key detection
                UIS.InputBegan:Connect(function(Key, Typing)
                	if Typing then return end
                	
                	local Key_String = GetKeyFromEnum(Key)
                	if Keys_Pressed[Key_String] then
                		Keys_Pressed[Key_String] = 1
                	end
                end)
                
                UIS.InputEnded:Connect(function(Key, Typing)
                	if Typing then return end
                	
                	local Key_String = GetKeyFromEnum(Key)
                	if Keys_Pressed[Key_String] then
                		Keys_Pressed[Key_String] = 0
                	end
                end)
                
                --// Fly loop
                
                _G.FlyLoop = RunService.RenderStepped:Connect(function()
                	local Character2 = Player.Character.StandMorph
                	if not Character2 then return end
                	Player.Character.StandMorph.PilotSpeed.Value = 0;
                	
                	Character2.PrimaryPart.CFrame = CFrame.new(Character2.PrimaryPart.Position, Character2.PrimaryPart.Position + workspace.CurrentCamera.CFrame.LookVector)
                	local CharacterMass = GetMass(Character2)
                	--// Calculate new velocity
                	
                    local Velocity = Vector3.new(0, CharacterMass/workspace.Gravity, 0) --// Lets try not to decend
                    for i,v in pairs(Keys_Pressed) do
                        if v == 0 then else
                        Velocity = Math(Key_Info[i].Operator, Velocity, Character2.PrimaryPart.CFrame[Key_Info[i].Direction] * Settings.FlySpeed2 * CharacterMass) end
                    end
                	
                	Character2.PrimaryPart.Velocity = Velocity
                end)
            else
                _G.FlyLoop:Disconnect()
                Player.Character.StandMorph.PilotSpeed.Value = 22
            end
		end)
    
        StandTab:Slider("Pilot Fly Speed", 0.2,2,0.2, function(t)
            Settings.FlySpeed2 = t
        end)
        
        StandTab:Seperator()
        
        StandTab:Toggle("Pilot any stand", "", false, function(t)
            local Character = game.Players.LocalPlayer.Character
            local StandMorph = Character:FindFirstChild("StandMorph")
            
            getgenv().PilotAnyStand = t
            
            if getgenv().PilotAnyStand then
                
                pcall(function()
                    Character.FocusCam:Destroy()
                    Character.HumanoidRootPart.Anchored = false
                    Character.Holder:Destroy()
                    StandMorph.AnimationController:Destroy()
                end)
                
                ActuallyEnabled = true
                
                local UserInputService = game:GetService("UserInputService")
                local Part = nil
                local MoveForward = false
                local MoveBackward = false
                local MoveLeft = false
                local MoveRight = false
                
                repeat task.wait() until StandMorph
                
                if PilotAnyStand then
                    local Holder = Instance.new("Part", Character)
                    Holder.Name = "Holder"
                    Holder.CFrame = Character.HumanoidRootPart.CFrame
                    Holder.Anchored = true
                    Holder.Transparency = 1
                    Part = Character.Holder
                    
                    local FocusCam = Instance.new("ObjectValue", Character)
                    FocusCam.Name = "FocusCam"
                    FocusCam.Value = StandMorph
                    FocusCam.Parent = Character
                end
                
                UserInputService.InputBegan:Connect(function(Input, IsTyping)
                    if IsTyping then return end
                    if Input.KeyCode == Enum.KeyCode.W then
                        MoveForward = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(Input, IsTyping)
                    if IsTyping then return end
                    if Input.KeyCode == Enum.KeyCode.W then
                        MoveForward = false
                    end
                end)
                
                UserInputService.InputBegan:Connect(function(Input, IsTyping)
                    if IsTyping then return end
                    if Input.KeyCode == Enum.KeyCode.S then
                        MoveBackward = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(Input, IsTyping)
                    if IsTyping then return end
                    if Input.KeyCode == Enum.KeyCode.S then
                        MoveBackward = false
                    end
                end)
                
                UserInputService.InputBegan:Connect(function(Input, IsTyping)
                    if IsTyping then return end
                    if Input.KeyCode == Enum.KeyCode.A then
                        MoveLeft = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(Input, IsTyping)
                    if IsTyping then return end
                    if Input.KeyCode == Enum.KeyCode.A then
                        MoveLeft = false
                    end
                end)
                
                UserInputService.InputBegan:Connect(function(Input, IsTyping)
                    if IsTyping then return end
                    if Input.KeyCode == Enum.KeyCode.D then
                        MoveRight = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(Input, IsTyping)
                    if IsTyping then return end
                    if Input.KeyCode == Enum.KeyCode.D then
                        MoveRight = false
                    end
                end)
                
                wait(.8)
                while getgenv().PilotAnyStand do task.wait()
                    StandMorph.HumanoidRootPart.CFrame = Character:WaitForChild("Holder").CFrame
                    
                    Character.HumanoidRootPart.Anchored = true
                    
                    if MoveForward then
                        Part.CFrame = Part.CFrame + Part.CFrame.LookVector * Settings["PilotanySpeed"]
                    elseif MoveBackward then
                        Part.CFrame = Part.CFrame - Part.CFrame.LookVector * Settings["PilotanySpeed"]
                    elseif MoveLeft then
                        Part.CFrame = Part.CFrame - Part.CFrame.RightVector * Settings["PilotanySpeed"]
                    elseif MoveRight then
                        Part.CFrame = Part.CFrame + Part.CFrame.RightVector * Settings["PilotanySpeed"]
                    end
                    
                    Part.CFrame = CFrame.new(Part.CFrame.Position, Part.CFrame.Position + workspace.Camera.CFrame.LookVector)
                end
            else
                ActuallyEnabled = false
                Character.FocusCam:Destroy()
                Character.HumanoidRootPart.Anchored = false
                Character.Holder:Destroy()
            end
        end)
        
        StandTab:Slider("Speed", 0.1, 2.5, 0.4, function(t)
            Settings["PilotanySpeed"] = t
        end)
        
        PlayerTab:Seperator()
	
        local InfDash
        local InfTick = tick();
        local InfDelay = 1;
        local DP = 50

        PlayerTab:Toggle("Infinite Dash", "Change Dash Power/Delay", nil, function(State)
            if State then
                InfDash = game:GetService("UserInputService").InputBegan:Connect(function(Input, GameProcessed)
                    if GameProcessed then return end
        
                    if Input.KeyCode == Enum.KeyCode[Player.PlayerStats.DashKey.Value] and (tick()-InfTick) >= InfDelay then
                        InfTick = tick()
                        if not Player.Character then return end
                        local Dir, Anim_ = Func.Get_Stroke();
                        local Anim = Instance.new("Animation", workspace) Anim.Name = "Dash_Xenon" Anim.AnimationId = "rbxassetid://"..Anim_
                        local Anim2 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
                        Anim2:Play()
                        GAYPENIS = Instance.new("BodyVelocity", game.Players.LocalPlayer.Character.HumanoidRootPart)
                        GAYPENIS.Velocity = (Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(Dir), 0)).lookVector * DP
                        GAYPENIS.MaxForce = Vector3.new(55555,1000,55555)
                        game:GetService("Debris"):AddItem(GAYPENIS, 0.25)
                    end
                end)
            else
                InfDash:Disconnect()
            end
        end)

        PlayerTab:Slider("Dash Power", 50, 1000, 50, function(Value)
            DP = Value;
        end)
        
        PlayerTab:Slider("Dash Delay", 0.5, 3.5, 0.5, function(Value)
            InfDelay = Value;
        end)

		MainTab:Toggle("Anti TS", "Avoids any time stop.", true, function(state)
			if state then
				AntiTS = game:GetService("RunService").RenderStepped:Connect(function()
					if Player.Character and Player.Character:FindFirstChild("InTimeStop") then
						Player.Character:FindFirstChild("InTimeStop"):Destroy()
					end
				end)
			else
				if AntiTS then
					AntiTS:Disconnect()
				end
			end
		end)
		
		MainTab:Toggle("Anti Rock-Trap", "gets rid of CD rock trap", false, function(t)
		    while t do
                repeat task.wait() until workspace.IgnoreInstances:FindFirstChild("Rocks")
                
                for i,v in pairs(workspace.IgnoreInstances.Rocks:GetChildren()) do
                    if string.find(v.Name, "Rock") then
                        v.Size = Vector3.new(0,0,0)
                        game.Players.LocalPlayer.Character.UpperTorso.Anchored = false
                    end
                end
                task.wait()
            end
		end)
		
		MainTab:Toggle("Anti Vamp-Burn", "", false, function(t)
		    while t do
              workspace.Weather.Value = "nil"
              task.wait(1)
            end
		end)
		
		MainTab:Toggle("Anti-Aerosmith", "anti aerosmith", false, function(t)
		    FuckAerosmith = t

            if FuckAerosmith then
                oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                
                while FuckAerosmith do task.wait(.13)
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(math.random(500,3000), math.random(500,3000), math.random(500,3000))
                end
                
                if not FuckAerosmith then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
                end
            end
		end)
		
		--------------------------------------------------------------------------------
		
        local function SearchForPlayer()
            for i,v in pairs(workspace.Living:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health >= 0.11 and not v:FindFirstChild("AIHandler") and v.Name ~= Player.Name and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 25 then
                    Settings.AttachedTarget = v
                    
                    SendNotification("Player Found", "Player nearby")
                    print(Settings.AttachedTarget)
                    task.wait(1)
                end
            end
        end
        
        local function checkDistance(part, distance)
            if game.Players.LocalPlayer:DistanceFromCharacter(part.Position) < distance then
                return true
            else
                return false
            end
        end
        
        --[[FightingTab:Toggle("Auto Target", "", false, function(t)
            getgenv().enabled = t
            
            while getgenv().enabled do wait(1)
                for i,v in pairs(workspace.Living:GetChildren()) do
                    if v.Name ~= game.Players.LocalPlayer.Name then
                        print(checkDistance(v.HumanoidRootPart, 25))
                        checkDistance(v.HumanoidRootPart, 25)
                        
                        Settings.AttachedTarget = v
                        
                        click(game:GetService("CoreGui")["XenonUI_LIB"].Main.Container["Attach Player"], true)
                    end
                end
            end
        end)]]
    
		MiscTab:Keybind("Toggle UI", Enum.KeyCode.RightControl, {"W", "A", "S", "D", "Up", "Down", "Left", "Right", "CapsLock", "Tab"}, function(key)
			if key then
				PlayerTab:Notification("Changed Toggle key to: ", key)
			else
				UI:ToggleUI()
			end
		end)
		
		MiscTab:Seperator()
		
		MiscTab:Button("Hide Name", "Hides your name in list and esc menu", function()
            Player.PlayerGui.HUD.Playerlist[Player.Name].Name = "???"
            Player.Name = "???"
            Player.DisplayName = "???"
        end)
        
        MiscTab:Toggle("Hide Player List", "Hides player list", false, function(t)
            getgenv().HPL = t
            
            if getgenv().HPL then
                Player.PlayerGui.HUD.Playerlist.Visible = false
                
                while getgenv().HPL do task.wait()
                    repeat task.wait() until game:GetService("CoreGui").RobloxGui.SettingsShield.SettingsShield.MenuContainer.PageViewClipper.PageView.PageViewInnerFrame:FindFirstChild("Players")
                    game:GetService("CoreGui").RobloxGui.SettingsShield.SettingsShield.MenuContainer.PageViewClipper.PageView.PageViewInnerFrame.Players.Visible = false
                end
            else
                Player.PlayerGui.HUD.Playerlist.Visible = true
            end
        end)
        
        MiscTab:Seperator()
        
        MiscTab:Button("No Fog", "Disables the fog in the game", function()
			MiscTab:Notification("Removed fog from the game.")
			if game.Lighting.FogEnd ~= 50000 then
				game.Lighting.FogEnd = 50000
				game.Lighting:GetPropertyChangedSignal("FogEnd"):Connect(function()
					game.Lighting.FogEnd = 50000
				end)
			end
        end)
        
        MiscTab:Seperator()
	
        MiscTab:Button("No-Clip", "Walk through walls!", function()
            task.wait(1)
            
            SendNotification("Vez's No-Clip", "Starting step 1.")
            
            a = Instance.new("Folder", workspace)
            a.Name = "FolderGay"
            for i,v in pairs(workspace.Map:GetDescendants()) do
                if v:IsA("BasePart") and not v:IsDescendantOf(workspace.Map.Roads) and not v:IsDescendantOf(workspace.Map.Terrain) and not v:IsDescendantOf(workspace.Map.ParkingGarage) and not v:IsDescendantOf(workspace.Map.IMPORTANT.OceanFloor) and v.Name ~= "Ocean" and not v:IsDescendantOf(workspace.Map.Prison_Bridge) and v.Name ~= "Sewer_Ladders_Part" then
                    task.spawn(function()
                        v:Clone().Parent = workspace.FolderGay
                    end)
                end
            end
            
            task.wait(0.1)
            
            SendNotification("Vez's No-Clip", "Starting step 2..")
            
            for i,v in pairs(workspace.Map:GetDescendants()) do
                if v:IsA("BasePart") and not v:IsDescendantOf(workspace.FolderGay) and not v:IsDescendantOf(workspace.Map.Roads) and not v:IsDescendantOf(workspace.Map.Terrain) and not v:IsDescendantOf(workspace.Map.ParkingGarage) and not v:IsDescendantOf(workspace.Map.Prison_Bridge) and v.Name ~= "Sewer_Ladders_Part" and not v:IsDescendantOf(workspace.Map.IMPORTANT.OceanFloor) and v.Name ~= "Ocean"then
                    task.spawn(function()
                        v.Size = Vector3.new(0,0,0)
                    end)
                end
            end
            
            task.wait(3)
            
            SendNotification("Vez's No-Clip", "Starting step 3...")
            
            for i,v in pairs(workspace.FolderGay:GetDescendants()) do
                if v:IsA("BasePart") and v.Name ~= "Sidewalk_1" and v.Name ~= "Sidewalk_2" and v.Material ~= "Cobblestone" and not string.find(v.Name, "Roof") and v.Name ~= "Stairs" and not string.find(v.Name, "Floor") and not string.find(v.Name, "Rails") and v.Name ~= "TrainStation_Walkway" and v.Name ~= "TrainStation_Platform" and v.Name ~= "Park_Path" and v.Name ~= "Gravel" and v.Name ~= "Grass" and v.Name ~= "Rock" and v.Name ~= "LowerStairs" and v.Name ~= "UpperStairs" and v.Name ~= "Truss" and not string.find(v.Name, "Grass") and v.Name ~= "Stairs_Step" and not v:IsDescendantOf(workspace.Map.Prison["Prison_Rails"]) and not v:IsDescendantOf(workspace.Map.Prison["Prison_Stairs"]) and not v:IsDescendantOf(workspace.Map.Prison["Prison_Flooring"]) and v.Name ~= "Prison_TopStaircase" and v.Name ~= "Prison_BottomStaircase" and v.Name ~= "Prison_Wall" and v.Name ~= "City_Building_Planks" and v.Name ~= "TrainStation_Under_Brick" and v.Name ~= "TrainStation_Steps" and v.Name ~= "WallPiece_2" and v.Name ~= "Arcade_Interior_Stair" then
                    v.CanCollide = false
                    if string.find(v.Name, "Colloseum_Barriers") then
                        v.CanCollide = false
                    end
                end
            end
            
            task.wait(0.35)
            
            SendNotification("Vez's No-Clip", "No-Clip Enabled")
        end)
        
        MiscTab:Seperator()
        
        MiscTab:Button("Remove Stand Animations", "", function()
            pcall(function()
                StandMorph.AnimationController:Destroy()
            end)
        end)
        
        MiscTab:Seperator()
        
        pcall(function()
            local ESP = loadstring(game:HttpGet("https://pastebin.com/raw/1KPn58Z3"))()
            
            _G.PESP = nil
            MiscTab:Toggle("Player ESP", "", false, function(t)
                _G.PESP = t
                if _G.PESP == true then
                    ESP:DrawBoxPlayers()
                else
                    ESP:CleanUp()
                end
            end)
        end)
        
        local function Attackity()
            while getgenv().AutoAttack do task.wait()
                M1()
                Barrage()
                BarrageFinisher()
                M2()
            end
        end
        
        local function PlayerAttach()
            local NPC = workspace.Living:FindFirstChild(Settings.AttachedTarget)
            local Character = Player.Character
            if not NPC or not Character then return end
            
            Loop = game:GetService("RunService").RenderStepped:Connect(function()
                task.wait()
                pcall(function()
                    Player.Character.StandMorph.HumanoidRootPart.CFrame = NPC.HumanoidRootPart.CFrame - NPC.HumanoidRootPart.CFrame.lookVector * Settings.Distance
                end)
                
                if Settings.Position == "Above" then
                    Player.Character.HumanoidRootPart.CFrame = NPC.HumanoidRootPart.CFrame - NPC.HumanoidRootPart.CFrame.lookVector * Settings.Distance2 + Vector3.new(0, Settings.Height, 0)
                else
                    Player.Character.HumanoidRootPart.CFrame = NPC.HumanoidRootPart.CFrame - NPC.HumanoidRootPart.CFrame.lookVector * Settings.Distance2 - Vector3.new(0, Settings.Height, 0)
                end
            end)
        end
        
        local function PlayerUnAttach()
            if Loop ~= nil then
                Loop:Disconnect()
            end
        end
        
        function SearchPlayer(Name)
            local ClosestMatch = nil
            local ClosestLetters = 0
            for i,v in pairs(game.Players:GetPlayers()) do
                local matched_letters = 0
                for i = 1, #Name do
                    if string.sub(Name:lower(), 1, i) == string.sub(v.Name:lower(), 1, i) then
                        matched_letters = i
                    end
                end
                if matched_letters > ClosestLetters then
                    ClosestLetters = matched_letters
                    ClosestMatch = v
                end
            end
            return ClosestMatch
        end
        
        local TextB;
        TextB = FightingTab:TextBox("Select Player", function(text)
            pcall(function()
                local PossiblePlayer = SearchPlayer(text)
              
                if PossiblePlayer then
                    Settings.AttachedTarget = PossiblePlayer.Name
                    TextB:Update(PossiblePlayer.Name)
                end
            end)
        end)
        
        FightingTab:Dropdown("Farm Method", {"Above", "Below"}, function(t)
		    Settings.Position = t
		end)
        
        FightingTab:Slider("Stand from player", 0, 12, 2.7, function(t)
            Settings.Distance = t
        end)
    
        FightingTab:Slider("Player from player", 0, 25, 10, function(t)
            Settings.Distance2 = t
        end)
        
        FightingTab:Slider("Height above player", 0, 50, 15, function(t)
            Settings.Height = t
        end)
        
        local AP = FightingTab:Toggle("Attach Player", "", false, function(t)
            if t then
                PlayerAttach()
            else
                PlayerUnAttach()
            end
        end)
        
        FightingTab:Toggle("Attach Stand", "", false, function(t)
            if t then
                local NPC = workspace.Living:FindFirstChild(Settings.AttachedTarget)
                local Character = Player.Character
                if not NPC or not Character then return end
                
                Loop2 = game:GetService("RunService").RenderStepped:Connect(function()
                    task.wait()
                    pcall(function()
                        Player.Character.StandMorph.HumanoidRootPart.CFrame = NPC.HumanoidRootPart.CFrame - NPC.HumanoidRootPart.CFrame.lookVector * Settings.Distance
                    end)
                end)
            else
                if Loop2 ~= nil then
                    Loop2:Disconnect()
                end
            end
        end)
        
        FightingTab:Toggle("Spectate Player", "", false, function(t)
            getgenv().Spectate = t
            
            if getgenv().Spectate then
                local FocusCam = Instance.new("ObjectValue", workspace.Living[Settings.AttachedTarget])
                FocusCam.Name = "FocusCam"
                FocusCam.Value = workspace.Living[Settings.AttachedTarget]:FindFirstChild("HumanoidRootPart")
                FocusCam.Parent = game.Players.LocalPlayer.Character
            else
                game.Players.LocalPlayer.Character.FocusCam:Destroy()
            end
        end)
        
        local AA = FightingTab:Toggle("Auto Attack", "automatically attacks enemy", false, function(t)
            getgenv().AutoAttack = t
            
            Attackity()
        end)
	else
		Player:Kick("ok lol")
	end

