--[[

	SCRIPT BY DISCORD USER: vezrr
	Please ignore the poor code as this was written a long time ago!
]]

pcall(function()
    workspace.BarrierRoofKicks:Destroy() -- destroys the parts in SBR which kick you
end)

--[[	WS/JP/FS = Player
		WS2/JP2/FS2 = Horse
]]

getgenv().Stuff = {
            ["WalkSpeed"] = 22;
            ["JumpPower"] = 50;
            ["WalkSpeed2"] = 0;
            ["JumpPower2"] = 65;
            ["FlySpeed"] = 3;
            ["FlySpeed2"] = 2;
}
-- list of npcs, selected npc, teleport delays
Stuff.Settings = {
    ["NPC_Table"] = {};
    ["SelectedNPC"] = nil;
    ["Tp1"] = 1;
    ["Tp2"] = 1;
    ["Tp3"] = 1;
    ["Tp4"] = 1;
    ["Tp5"] = 1;
}
-- updates the list of npcs
Stuff.UpdateList = function()
    Stuff.Settings["NPC_Table"] = {} 

    for i,v in pairs(workspace.Living:GetChildren()) do
        if not table.find(Stuff.Settings["NPC_Table"], v.Name) then
            table.insert(Stuff.Settings["NPC_Table"], v.Name)
        end
    end
end

--[ws/jp hook]--
local Player = game:GetService("Players").LocalPlayer
local Name = Player.Name
local hum = Player.Character.Humanoid
local speed = hum.WalkSpeed
local jump = hum.JumpPower
local HorseVar = workspace[Name .."'s Horse"]

local old_method;
old_method = hookmetamethod(game, "__newindex", newcclosure(function(self, key, sped, ...)
    if key == "WalkSpeed" then
        speed = sped
        return old_method(self, key, Stuff["WalkSpeed"], ...)
    end
    if key == "JumpPower" then
        jump = sped
        return old_method(self, key, Stuff["JumpPower"], ...)
    end
    return old_method(self, key, sped, ...)
end))

local old_method2;
old_method2 = hookmetamethod(game, "__index", newcclosure(function(self, key, ...)
    if key == "WalkSpeed" then
        return speed
    end
    if key == "JumpPower" then
        return jump
    end
    if key == "MoveDirection" then
        return Vector3.new(0,0,0)
    end
    return old_method2(self, key, ...)
end))

-- old invisibility bypass made by my beloved dank !
--[[local functionLibrary = require(game.ReplicatedStorage:WaitForChild('Modules').FunctionLibrary)
local old = functionLibrary.pcall

functionLibrary.pcall = function(...)
    local f = ...

    if type(f) == 'function' and #getupvalues(f) == 11 then 
        return
    end
    
    return old(...)
end]]

-- tp bypass
local OldNamecallTP;
OldNamecallTP = hookmetamethod(game, '__namecall', newcclosure(function(self, ...)
    local Arguments = {...}
    local Method =  getnamecallmethod()
        
    if Method == "InvokeServer" then
        if Arguments[1] == "idklolbrah2de" then
            return "  ___XP DE KEY"
        end
    end
        
    return OldNamecallTP(self, ...)
end))

-- dont mind this vvvvvvv
local num = 0
local function breakity(par)
    if par.Name == 'Part' then
        num = num + 1
        par.Name = 'Part '..num
    end
end

for i,v in pairs(workspace.Map:GetChildren()) do
    if v:IsA("Part") then
        breakity(v)
    end
end

-- smth to do with infinite dash, made by my beloved enx
local Get_Stroke = function()
    StrokeDir = 180
    local Anim = "6926086304"
        
    if (game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A)) then
        StrokeDir = 90
        Anim = "6926086567"
    end
        
    if (game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D)) and StrokeDir == 180 then
        StrokeDir = -90
        Anim = "6926086883"
    end
        
    if (game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W)) and StrokeDir == 180 then
        StrokeDir = 0
        Anim = "6926086032"
    end
        
    return StrokeDir, Anim
end

local InfDash
local InfTick = tick();
local InfDelay = 1;
local DP = 50

----------------------

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

local Window = Library.CreateLib("yba is ass by vezrr - V2.04 - https://discord.gg/DXrGhrxZ9v", colors)
local Tab = Window:NewTab("Main")
local Tab5 = Window:NewTab("Auto SBR Settings")
local Tab2 = Window:NewTab("Teleports")
local Tab3 = Window:NewTab("Horse Stuff")
local Tab4 = Window:NewTab("Other")

local Section = Tab:NewSection("Player")
local SBR = Tab5:NewSection("Auto SBR Settings")
local Section2 = Tab2:NewSection("Teleports")
local Section3 = Tab3:NewSection("Stuff")
local Section4 = Tab3:NewSection("Stuffidy Stuff")
local Section5 = Tab4:NewSection("Other")

Section:NewToggle("Speed", "", function(State)
    Stuff.Settings["Speed"] = State
    
    if not Stuff.Settings["Speed"] then
        Player.Character.Humanoid.WalkSpeed = 22
    end
end)

Section:NewSlider("Speed", "", 500,22, function(Num)
    if Stuff.Settings["Speed"] then
        Stuff["WalkSpeed"] = Num
    else
        Player.Character.Humanoid.WalkSpeed = 22
    end
end)

Section:NewToggle("Jump", "", function(State)
    Stuff.Settings["Jump"] = State
    
    if not Stuff.Settings["Jump"] then
        Player.Character.Humanoid.JumpPower = 50
    end
end)

Section:NewSlider("Jump", "", 500,50, function(Num)
    if Stuff.Settings["Jump"] then
        Stuff["JumpPower"] = Num
    else
        Player.Character.Humanoid.JumpPower = 50
    end
end)

Section:NewToggle("Player Fly", "Move = WASD", function(t)
    if t == true then
        local Keys_Pressed = {
        	["W"] = 0;
        	["A"] = 0;
        	["S"] = 0;
        	["D"] = 0;
        }
        local Key_Info = {
        	["W"] = {
        		["Operator"] = "+";
        		["Direction"] = "LookVector";
        	};
        	["A"] = {
        		["Operator"] = "-";
        		["Direction"] = "RightVector";
        	};
        	["S"] = {
        		["Operator"] = "-";
        		["Direction"] = "LookVector";
        	};
        	["D"] = {
        		["Operator"] = "+";
        		["Direction"] = "RightVector";
        	};
        }
        
        
        --// Begin fly script
        
        --// Variables
        local Players = game:GetService("Players")
        local UIS = game:GetService("UserInputService")
        local RunService = game:GetService("RunService")
        local TweenService = game:GetService("TweenService")
        
        --// Neat functions
        local function GetKeyFromEnum(enum)
        	return enum.KeyCode.Name
        end
        
        local function GetMass(Model)
        	local Mass = 0;
        	for i,v in pairs(Model:GetDescendants()) do
        		if v:IsA("BasePart") then Mass = Mass + v:GetMass() end
        	end
        	return Mass;
        end
        
        local function Math(Operator, A, B)
        	if Operator == "-" then return A-B elseif Operator == "+" then return A+B end
        end
        
        --// Key detection
        UIS.InputBegan:Connect(function(Key, Typing)
        	if Typing then return end
        	
        	local Key_String = GetKeyFromEnum(Key)
        	if Keys_Pressed[Key_String] then
        		Keys_Pressed[Key_String] = 1
        	end
        end)
        
        UIS.InputEnded:Connect(function(Key, Typing)
        	if Typing then return end
        	
        	local Key_String = GetKeyFromEnum(Key)
        	if Keys_Pressed[Key_String] then
        		Keys_Pressed[Key_String] = 0
        	end
        end)
        
        --// Fly loop
        
        _G.FlyLoop = RunService.RenderStepped:Connect(function()
            Character = Player.Character or Player.CharacterAdded:Wait()
        	if not Character then return end
        	Character.Humanoid.WalkSpeed = 0; Character.Humanoid.JumpPower = 0;
        	
        	Character.PrimaryPart.CFrame = CFrame.new(Character.PrimaryPart.Position, Character.PrimaryPart.Position + workspace.CurrentCamera.CFrame.LookVector)
        	local CharacterMass = GetMass(Character)
        	--// Calculate new velocity
        	
            local Velocity = Vector3.new(0, CharacterMass/workspace.Gravity, 0) --// Lets try not to decend
            for i,v in pairs(Keys_Pressed) do
                if v == 0 then else
                Velocity = Math(Key_Info[i].Operator, Velocity, Character.PrimaryPart.CFrame[Key_Info[i].Direction] * Stuff["FlySpeed"] * CharacterMass) end
            end
        	
        	Character.PrimaryPart.Velocity = Velocity
        end)
    else
        _G.FlyLoop:Disconnect()
        Player.Character.Humanoid.WalkSpeed = 16
    end
end)

Section:NewSlider("Fly Speed", "", 35,1, function(t)
    Stuff["FlySpeed"] = t
end)

Section:NewToggle("Anti Vamp Burn", "", function(State)
    if State == true then
        workspace.Weather.Value = nil
        _G.VampThing = workspace.Weather:GetPropertyChangedSignal("Value"):Connect(function()
            workspace.Weather.Value = nil
        end)
    else
        pcall(function()
            _G.VampThing:Disconnect()
        end)

        workspace.Weather.Value = "Sunny"
    end
end)

Section:NewToggle("No Fog", "", function(t)
    if t then
        game.Lighting.FogStart = 99999999
    else
        game.Lighting.FogStart = 0
    end
end)

SBR:NewSlider("TP Stage 1 delay", "", 35,0, function(t)
    Stuff.Settings["Tp1"] = t
end)

SBR:NewSlider("TP Stage 2 delay", "", 35,0, function(t)
    Stuff.Settings["Tp2"] = t
end)

SBR:NewSlider("TP Stage 3 delay", "", 35,0, function(t)
    Stuff.Settings["Tp3"] = t
end)

SBR:NewSlider("TP Stage 4 delay", "", 35,0, function(t)
    Stuff.Settings["Tp4"] = t
end)

SBR:NewSlider("TP Finish delay", "", 35,0, function(t)
    Stuff.Settings["Tp5"] = t
end)

local stag1 = workspace.Barriers:FindFirstChild("1").CFrame
local stag2 = workspace.Barriers:FindFirstChild("2").CFrame
local stag3 = workspace.Barriers:FindFirstChild("3").CFrame
local stag4 = workspace.Map["NYC Bridge"].Start.CFrame
local hider = workspace.Map["NYC Bridge"].NYCBridge.Bridge.Bridge.MeshPart.CFrame
local hider2 = workspace.Zone.CFrame - Vector3.new(0,35,0)
local ends = workspace.Map["NYC Bridge"]["End_Line"].CFrame


Section:NewButton("Auto SBR V1 (Player)", "use if noob", function()

    pcall(function()
        if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
            Player.Character.HumanoidRootPart.CFrame = hider
            
            repeat task.wait() until workspace.Barrier:FindFirstChild("StartBarrier") == nil
            task.wait(Stuff.Settings["Tp1"])
            Player.Character.HumanoidRootPart.CFrame = stag1
            
            task.wait(0.2)
            
            Player.Character.HumanoidRootPart.CFrame = hider
            
            repeat task.wait() until workspace.Barriers:FindFirstChild("1") == nil
            task.wait(Stuff.Settings["Tp2"])
            Player.Character.HumanoidRootPart.CFrame = stag2
            
            task.wait(0.2)
            
            Player.Character.HumanoidRootPart.CFrame = hider
            
            repeat task.wait() until workspace.Barriers:FindFirstChild("2") == nil
            task.wait(Stuff.Settings["Tp3"])
            Player.Character.HumanoidRootPart.CFrame = stag3
            
            task.wait(0.2)
            
            Player.Character.HumanoidRootPart.CFrame = hider
            
            repeat task.wait() until workspace.Barriers:FindFirstChild("3") == nil
            task.wait(Stuff.Settings["Tp4"])
            Player.Character.HumanoidRootPart.CFrame = stag4
            
            task.wait(0.2)

            repeat task.wait()
                Player.Character.HumanoidRootPart.CFrame = hider2
            until workspace.Barriers:FindFirstChild("4") == nil
            task.wait(Stuff.Settings["Tp5"])
            
            Player.Character.HumanoidRootPart.CFrame = ends
            
            task.wait(2)
            Player.Character.HumanoidRootPart.CFrame = hider
        end
    end)
end)

Section:NewButton("Auto SBR V2 (Horse)", "use if noob", function()
    pcall(function()
        repeat wait() until workspace:FindFirstChild("StartBarrier") == nil
        task.wait(Stuff.Settings["Tp1"])
        HorseVar.HumanoidRootPart.CFrame = stag1
        
        wait(0.2)
            
        repeat wait() until workspace.Barriers:FindFirstChild("1") == nil
        task.wait(Stuff.Settings["Tp2"])
        HorseVar.HumanoidRootPart.CFrame = stag2
        
        wait(0.2)
            
        repeat wait() until workspace.Barriers:FindFirstChild("2") == nil
        task.wait(Stuff.Settings["Tp3"])
        HorseVar.HumanoidRootPart.CFrame = stag3
        
        wait(0.2)
            
        repeat wait() until workspace.Barriers:FindFirstChild("3") == nil
        task.wait(Stuff.Settings["Tp4"])
        HorseVar.HumanoidRootPart.CFrame = stag4
        
        wait(0.2)
        
        repeat wait() until workspace.Barriers:FindFirstChild("4") == nil
        task.wait(Stuff.Settings["Tp5"])
        HorseVar.Humanoid.WalkSpeed = 10
        
        task.wait()
        
        HorseVar.HumanoidRootPart.CFrame = ends
    end)
end)

--[[Section5:NewButton("Delete Barriers", "", function()
    workspace.Barrier.Barrier:Destroy()
    workspace.Barrier.Barrier:Destroy()
    workspace.Barrier.Barrier:Destroy()
    workspace.Barrier.Barrier:Destroy()
    workspace.Barrier.Barrier:Destroy()
end)]]

Section5:NewButton("Delete Stage Barriers", "", function(t)
    workspace.Barriers["1"]:Destroy()
    workspace.Barriers["2"]:Destroy()
    workspace.Barriers["3"]:Destroy()
    workspace.Barriers["4"]:Destroy()
end)

Section2:NewButton("Last Stage (Hide)", "hides you in last stage", function()
    if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
        Player.Character.HumanoidRootPart.CFrame = hider2
    end
end)

Section2:NewButton("End of SBR", "TP TO END OF SBR", function()
    Player.Character.HumanoidRootPart.CFrame = ends
end)

Section3:NewToggle("Enable Walkspeed", "gay", function(WS2)
    if WS2 then
        if (HorseVar and HorseVar:FindFirstChild("Humanoid")) and HorseVar.Seat.Occupant == Player.Character.Humanoid then
            HorseVar.Humanoid.WalkSpeed = Stuff["WalkSpeed2"]
        else
            HorseVar.Humanoid.WalkSpeed = 0
        end
    else
        HorseVar.Humanoid.WalkSpeed = 0
    end
end)

Section3:NewSlider("Speed", "speedy", 400, 10, function(WS2) -- 500 (MaxValue) | 0 (MinValue)
    Stuff["WalkSpeed2"] = WS2
end)

Section3:NewSlider("Jump", "jumpy", 400, 10, function(JP2) -- 500 (MaxValue) | 0 (MinValue)
    HorseVar.Humanoid.JumpPower = JP2
        game:GetService("UserInputService").InputBegan:connect(function(inputObject, gameProcessedEvent)
        if inputObject.KeyCode == Enum.KeyCode.Space then
            HorseVar.Humanoid.Jump = true
        end
    end)
end)

Section3:NewToggle("Horse Fly", "Move = WASD", function(t)
    if t == true then
        local Keys_Pressed = {
        	["W"] = 0;
        	["A"] = 0;
        	["S"] = 0;
        	["D"] = 0;
        }
        local Key_Info = {
        	["W"] = {
        		["Operator"] = "+";
        		["Direction"] = "LookVector";
        	};
        	["A"] = {
        		["Operator"] = "-";
        		["Direction"] = "RightVector";
        	};
        	["S"] = {
        		["Operator"] = "-";
        		["Direction"] = "LookVector";
        	};
        	["D"] = {
        		["Operator"] = "+";
        		["Direction"] = "RightVector";
        	};
        }
        
        --// Variables
        local Players = game:GetService("Players")
        local UIS = game:GetService("UserInputService")
        local RunService = game:GetService("RunService")
        local TweenService = game:GetService("TweenService")
        
        --// Neat functions
        local function GetKeyFromEnum(enum)
        	return enum.KeyCode.Name
        end
        
        local function GetMass(Model)
        	local Mass = 0;
        	for i,v in pairs(Model:GetDescendants()) do
        		if v:IsA("BasePart") then Mass = Mass + v:GetMass() end
        	end
        	return Mass;
        end
        
        local function Math(Operator, A, B)
        	if Operator == "-" then return A-B elseif Operator == "+" then return A+B end
        end
        
        --// Key detection
        UIS.InputBegan:Connect(function(Key, Typing)
        	if Typing then return end
        	
        	local Key_String = GetKeyFromEnum(Key)
        	if Keys_Pressed[Key_String] then
        		Keys_Pressed[Key_String] = 1
        	end
        end)
        
        UIS.InputEnded:Connect(function(Key, Typing)
        	if Typing then return end
        	
        	local Key_String = GetKeyFromEnum(Key)
        	if Keys_Pressed[Key_String] then
        		Keys_Pressed[Key_String] = 0
        	end
        end)
        
        --// Fly loop
        
        _G.FlyLoop2 = RunService.RenderStepped:Connect(function()
            Character = HorseVar
            
        	Character.Humanoid.WalkSpeed = 0;
        	Character.Humanoid.JumpPower = 0;
        	HorseVar.Speed.Value = 0
        	Character.PrimaryPart.CFrame = CFrame.new(Character.PrimaryPart.Position, Character.PrimaryPart.Position + workspace.CurrentCamera.CFrame.LookVector)
        	local CharacterMass = GetMass(Character)
        	--// Calculate new velocity
        	
            local Velocity = Vector3.new(0, CharacterMass/workspace.Gravity, 0) --// Lets try not to decend
            for i,v in pairs(Keys_Pressed) do
                if v == 0 then else
                Velocity = Math(Key_Info[i].Operator, Velocity, Character.PrimaryPart.CFrame[Key_Info[i].Direction] * Stuff["FlySpeed"] * CharacterMass) end
            end
        	
        	Character.PrimaryPart.Velocity = Velocity
        end)
    else
        _G.FlyLoop2:Disconnect()
        HorseVar.Humanoid.WalkSpeed = 16
    end
end)

Section4:NewButton("Last Stage (Hide)", "hides you in last stage", function()
    if HorseVar and HorseVar:FindFirstChild("HumanoidRootPart") then
        HorseVar.HumanoidRootPart.CFrame = hider
    end
end)

Section4:NewButton("End of SBR", "TP TO END OF SBR", function()
    HorseVar.HumanoidRootPart.CFrame = ends
end)

Section4:NewButton("Hide Horse", "hide horse in start of sbr", function()
    if HorseVar and HorseVar:FindFirstChild("HumanoidRootPart") then
        HorseVar.HumanoidRootPart.CFrame = hider
    end
end)


Section4:NewButton("TP to Horse", "yes", function()
    if HorseVar and HorseVar:FindFirstChild("HumanoidRootPart") then
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = HorseVar.HumanoidRootPart.CFrame
    end
end)

Section4:NewButton("TP Horse to you", "yes2", function()
    if HorseVar and HorseVar:FindFirstChild("HumanoidRootPart") then
        HorseVar.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    end
end)

Section5:NewButton("Chat Logs", "see everyones messages", function()
    loadstring(game:HttpGet("https://pastebin.com/raw/zTV1VTTB"))()
end)

for i,v in pairs(workspace.Living:GetChildren()) do
    table.insert(Stuff.Settings["NPC_Table"], v.Name)
end

function SearchPlayer(Name)
    local ClosestMatch = nil
    local ClosestLetters = 0
    for i,v in pairs(game.Players:GetPlayers()) do
        local matched_letters = 0
        for i = 1, #Name do
            if string.sub(Name:lower(), 1, i) == string.sub(v.Name:lower(), 1, i) then
                matched_letters = i
            end
        end
        if matched_letters > ClosestLetters then
            ClosestLetters = matched_letters
            ClosestMatch = v
        end
    end
    return ClosestMatch
end

local TextB;
TextB = Section5:NewTextBox("Select Player", "dont need full name", function(text)
    pcall(function()
        local PossiblePlayer = SearchPlayer(text)
      
        if PossiblePlayer then
            Stuff.Settings.SelectedNPC = PossiblePlayer.Name
            TextB:Update(PossiblePlayer.Name)
        end
    end)
end)

local NPCSelection = Section5:NewDropdown("Player Selection", "Hello", Stuff.Settings["NPC_Table"], function(selected)
    Stuff.Settings.SelectedNPC = selected
end)

local Players = game:GetService("Players")
game.Players.PlayerAdded:Connect(function(player)
    repeat task.wait() until workspace.Living:FindFirstChild(player.Name)
    Stuff.UpdateList()
    
    print(player.Name .. " joined the game!")
    NPCSelection:Refresh(Stuff.Settings["NPC_Table"])
end)

game.Players.PlayerRemoving:Connect(function(player)
    print("A player has left: " .. player.Name)
    Stuff.UpdateList()
    NPCSelection:Refresh(Stuff.Settings["NPC_Table"])
end)

local Distanceo = 2.5
local Distanceo2 = 3
local Heighto = 4

local Loop = nil
Section5:NewToggle("Attach Stand To Player", "the title the title", function(NewState)
    if NewState == true then
        local NPC = workspace.Living:FindFirstChild(Stuff.Settings.SelectedNPC)
        local Character = Player.Character
        if not NPC or not Character then return end
        
        Loop = game:GetService("RunService").RenderStepped:Connect(function()
            game.Players.LocalPlayer.Character.PrimaryPart.StandAttach.WorldCFrame = NPC.PrimaryPart.CFrame - NPC.PrimaryPart.CFrame.LookVector * Distanceo
        end)
     else
        if Loop ~= nil then Loop:Disconnect() end
     end
end)

Section5:NewSlider("Stand from player", "", 12,-5, function(t)
    Distanceo = t
end)

Section5:NewSlider("Player from player", "", 45,0, function(t)
    Distanceo2 = t
end)

Section5:NewSlider("Height from player", "", 50,-25, function(t)
    Heighto = t
end)

local Loop = nil
Section5:NewToggle("Attach Yourself To Player", "the title the title", function(NewState)
    if NewState == true then
        local NPC = workspace.Living:FindFirstChild(Stuff.Settings.SelectedNPC)
        local Character = Player.Character
        if not NPC or not Character then return end
        
        Loop = game:GetService("RunService").RenderStepped:Connect(function()
            task.wait()
            Player.Character.StandMorph.HumanoidRootPart.CFrame = NPC.HumanoidRootPart.CFrame - NPC.HumanoidRootPart.CFrame.lookVector * Distanceo
            Player.Character.HumanoidRootPart.CFrame = NPC.HumanoidRootPart.CFrame - NPC.HumanoidRootPart.CFrame.lookVector * Distanceo2 + Vector3.new(0,Heighto,0)
        end)
     else
        if Loop ~= nil then Loop:Disconnect() end
     end
end)

Section5:NewButton("TP to Player", "Tp to Player bro", function()
    local NPC = workspace.Living:FindFirstChild(Stuff.Settings.SelectedNPC)
    local Character = Player.Character
    if not NPC or not Character then return end
    
    game.Players.LocalPlayer.Character.PrimaryPart.CFrame = NPC.PrimaryPart.CFrame - NPC.PrimaryPart.CFrame.LookVector * Distanceo
end)

local Func = {}

local uis = game:GetService("UserInputService")

Section5:NewLabel("Inf Dash")

Section5:NewToggle("Infinite Dash", "Change Dash Power/Delay", function(State)
    if State then
        InfDash = game:GetService("UserInputService").InputBegan:Connect(function(Input, GameProcessed)
            if GameProcessed then return end

            if Input.KeyCode == Enum.KeyCode[Player.PlayerStats.DashKey.Value] and (tick()-InfTick) >= InfDelay then
                InfTick = tick()
                if not Player.Character then return end
                local Dir, Anim_ = Get_Stroke();
                local Anim = Instance.new("Animation", workspace) Anim.Name = "Dash_Xenon" Anim.AnimationId = "rbxassetid://"..Anim_
                local Anim2 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
                Anim2:Play()
                GAYPENIS = Instance.new("BodyVelocity", game.Players.LocalPlayer.Character.HumanoidRootPart)
                GAYPENIS.Velocity = (Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(Dir), 0)).lookVector * DP
                GAYPENIS.MaxForce = Vector3.new(55555,1000,55555)
                game:GetService("Debris"):AddItem(GAYPENIS, 0.25)
            end
        end)
    else
        InfDash:Disconnect()
    end
end)

Section5:NewSlider("Dash Power", "", 1000, 50, function(Value)
    DP = Value;
end)

Section5:NewSlider("Dash Delay", "", 3.5, 0.5, function(Value)
    InfDelay = Value;
end)
