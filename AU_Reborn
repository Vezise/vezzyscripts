local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("AU Reborn", "DarkTheme")
local Tab = Window:NewTab("Player")
local A = Tab:NewSection("Player shit")

-- spoof walkspeed nerd
local Old;
  Old = hookmetamethod(game, "__index", function(self, key)
    if key == "WalkSpeed" and self == game.Players.LocalPlayer.Character.Humanoid then
      return 8
    end
    return Old(self, key)
end)

local Speed = 50
local JumpPower = 45
local JumpTime = 0.11

A:NewTextBox("Choose Character","", function(t)
    game:GetService("ReplicatedStorage").Remotes.Equip:FireServer(t)
end)

A:NewSlider("Hip Height", "", 40, 0, function(t)
    game.Players.LocalPlayer.Character.Humanoid.HipHeight = t
end)

A:NewToggle("Speed & Jump Power", "", function(t)
    if t == true then
        local UserInputService = game:GetService("UserInputService")
        local RunService = game:GetService("RunService")
        local Player = game:GetService("Players").LocalPlayer
        
        local Event = nil
        
        local Inputs = {
          ["Left"] = false;
          ["Right"] = false;
        
          ["Forward"] = false;
          ["Backward"] = false;
        
          ["Jumping"] = false;
        }
        
        local JumpQueue = false
        local CanJump = true;
        
        _G.Landed = Player.Character.Humanoid.StateChanged:Connect(function(_,new)
            if new == Enum.HumanoidStateType.Landed then
                CanJump = true;
            end
        end)
        
         _G.Event = RunService.RenderStepped:Connect(function()
            local Char = Player.Character
            if Char and Char.PrimaryPart then
        
                local LookVector = Char.PrimaryPart.CFrame.LookVector * Speed
                local JP = 0
            
                if (Inputs.Left == false and Inputs.Right == false and Inputs.Forward == false and Inputs.Backward == false) then
                    LookVector = Vector3.new(0, 0, 0)
                end
        
                if Inputs.Jumping and not JumpQueue and CanJump then
                    JumpQueue = true
                    CanJump = false
                    task.delay(JumpTime, function() JumpQueue = false end)
                end
        
                if JumpQueue then
                    JP = JumpPower
                end
        
                Char.PrimaryPart.Velocity = Vector3.new(LookVector.X, (JP == 0 and Char.PrimaryPart.Velocity.Y or JP), LookVector.Z)
        
            end
         end)
        
        _G.IB = UserInputService.InputBegan:Connect(function(Input, GameProcessed)
            if GameProcessed then return end
          
            if Input.KeyCode == Enum.KeyCode.A then Inputs.Left = true end
            if Input.KeyCode == Enum.KeyCode.D then Inputs.Right = true end
            if Input.KeyCode == Enum.KeyCode.W then Inputs.Forward = true end
            if Input.KeyCode == Enum.KeyCode.S then Inputs.Backward = true end
        
            if Input.KeyCode == Enum.KeyCode.Space then Inputs.Jumping = true end
        end)
        
        _G.IE = UserInputService.InputEnded:Connect(function(Input, GameProcessed)
            if GameProcessed then return end
          
            if Input.KeyCode == Enum.KeyCode.A then Inputs.Left = false end
            if Input.KeyCode == Enum.KeyCode.D then Inputs.Right = false end
            if Input.KeyCode == Enum.KeyCode.W then Inputs.Forward = false end
            if Input.KeyCode == Enum.KeyCode.S then Inputs.Backward = false end
        
            if Input.KeyCode == Enum.KeyCode.Space then Inputs.Jumping = false end
        end)
    else
        _G.Event:Disconnect()
        _G.IB:Disconnect()
        _G.IE:Disconnect()
    end
end)

A:NewSlider("Change WalkSpeed", "", 150,8, function(t)
    Speed = t
end)

A:NewSlider("Change JumpPower", "", 150,40, function(t)
    JumpPower = t
end)

A:NewToggle("Invisibility", "", function(t)
    if t then
        A = Instance.new("Part", workspace)
        A.Anchored = true
        A.Size = Vector3.new(2000,1,2000)
        A.Position = game.Players.LocalPlayer.Character.Torso.Position + Vector3.new(0,-45,0)
        task.wait(.1)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,-44,0)
        task.wait(.1)
        game.Players.LocalPlayer.Character.HumanoidRootPart.RootJoint.Part1 = nil
        task.wait(.1)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,47,0)
    else
        game.Players.LocalPlayer.Character.HumanoidRootPart.RootJoint.Part1 = game.Players.LocalPlayer.Character.Torso
    end
end)

A:NewLabel("Fighting")

-- selected player
Selected = nil
Type = "Behind"
Distance = 5

function SearchPlayer(Name)
    local ClosestMatch = nil
    local ClosestLetters = 0
    for i,v in pairs(game.Players:GetPlayers()) do
        local matched_letters = 0
        for i = 1, #Name do
            if string.sub(Name:lower(), 1, i) == string.sub(v.Name:lower(), 1, i) then
                matched_letters = i
            end
        end
        if matched_letters > ClosestLetters then
            ClosestLetters = matched_letters
            ClosestMatch = v
        end
    end
    return ClosestMatch
end

local TextB;
TextB = A:NewTextBox("Select Player", "dont need full name", function(text)
    pcall(function()
        local PossiblePlayer = SearchPlayer(text)
      
        if PossiblePlayer then
            Selected = PossiblePlayer.Name
            TextB:Update(PossiblePlayer.Name)
        end
    end)
end)

local M1 = true
local A1 = false
local A2 = false
local A3 = false
local A4 = false
local G = false

A:NewDropdown("Select Attack-Type","",{"Behind","Under","Front","Direct"},function(t)
    Type = t
end)

A:NewToggle("Auto Attack", "", function(t)
    _G.AA = t
    while _G.AA == true do game:GetService("RunService").RenderStepped:Wait()
        if Type == "Under" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild(Selected).HumanoidRootPart.CFrame * CFrame.Angles(math.rad(90),0,0) - Vector3.new(0,Distance,0)
        end
        if Type == "Behind" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild(Selected).HumanoidRootPart.CFrame - workspace:FindFirstChild(Selected).HumanoidRootPart.CFrame.LookVector * Distance
        end
        if Type == "Front" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild(Selected).HumanoidRootPart.CFrame + workspace:FindFirstChild(Selected).HumanoidRootPart.CFrame.LookVector * Distance
        end
        if Type == "Direct" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild(Selected).HumanoidRootPart.CFrame
        end
        if M1 == true then
            game:GetService("ReplicatedStorage").Remotes.Combat:FireServer()
        end
        task.wait()
        if A1 == true then
            game:GetService("ReplicatedStorage").Remotes.Skill:FireServer("One", workspace:FindFirstChild(Selected).Torso.Position)
        end
        task.wait()
        if A2 == true then
            game:GetService("ReplicatedStorage").Remotes.Skill:FireServer("Two", workspace:FindFirstChild(Selected).Torso.Position)
        end
        task.wait()
        if A3 == true then
            game:GetService("ReplicatedStorage").Remotes.Skill:FireServer("Three", workspace:FindFirstChild(Selected).Torso.Position)
        end
        task.wait()
        if A4 == true then
            game:GetService("ReplicatedStorage").Remotes.Skill:FireServer("Four", workspace:FindFirstChild(Selected).Torso.Position)
        end
        task.wait()
        if G == true then
            game:GetService("ReplicatedStorage").Remotes.Skill:FireServer("Five", workspace:FindFirstChild(Selected).Torso.Position)
        end
    end
end)

A:NewSlider("Distance", "", 16,3, function(t)
    Distance = t
end)

A:NewToggle("Toggle M1", "", function(t)
    M1 = t
end)

A:NewToggle("Toggle Skill 1", "", function(t)
    A1 = t
end)

A:NewToggle("Toggle Skill 2", "", function(t)
    A2 = t
end)

A:NewToggle("Toggle Skill 3", "", function(t)
    A3 = t
end)

A:NewToggle("Toggle Skill 4", "", function(t)
    A4 = t
end)

A:NewToggle("Toggle Awakening", "", function(t)
    G = t
end)


A:NewButton("TP to Training", "", function()
    game:GetService("TeleportService"):Teleport(10393542610)
end)
